
dispacher.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042bc  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  080044b4  080044b4  000144b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045f8  080045f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080045f8  080045f8  000145f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004600  08004600  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004600  08004600  00014600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004604  08004604  00014604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  08004678  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08004678  00020168  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9ea  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ffa  00000000  00000000  0002ea88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd8  00000000  00000000  00030a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd0  00000000  00000000  00031860  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027f3a  00000000  00000000  00032530  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a3b9  00000000  00000000  0005a46a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f64f8  00000000  00000000  00064823  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015ad1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f5c  00000000  00000000  0015ad98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	0800449c 	.word	0x0800449c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	0800449c 	.word	0x0800449c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f929 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f806 	bl	8000554 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f003 f94c 	bl	80037e4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f943 	bl	80007fe <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000590:	f000 f90b 	bl	80007aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000000 	.word	0x20000000

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000004 	.word	0x20000004
 80005d8:	200000a0 	.word	0x200000a0

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	200000a0 	.word	0x200000a0

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <__NVIC_SetPriorityGrouping+0x40>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 800061e:	4313      	orrs	r3, r2
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x40>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	05fa0000 	.word	0x05fa0000

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db0b      	blt.n	8000682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 021f 	and.w	r2, r3, #31
 8000670:	4907      	ldr	r1, [pc, #28]	; (8000690 <__NVIC_EnableIRQ+0x38>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	095b      	lsrs	r3, r3, #5
 8000678:	2001      	movs	r0, #1
 800067a:	fa00 f202 	lsl.w	r2, r0, r2
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e100 	.word	0xe000e100

08000694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	db0a      	blt.n	80006be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	490c      	ldr	r1, [pc, #48]	; (80006e0 <__NVIC_SetPriority+0x4c>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006bc:	e00a      	b.n	80006d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4908      	ldr	r1, [pc, #32]	; (80006e4 <__NVIC_SetPriority+0x50>)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	3b04      	subs	r3, #4
 80006cc:	0112      	lsls	r2, r2, #4
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	440b      	add	r3, r1
 80006d2:	761a      	strb	r2, [r3, #24]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000e100 	.word	0xe000e100
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b089      	sub	sp, #36	; 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	f1c3 0307 	rsb	r3, r3, #7
 8000702:	2b04      	cmp	r3, #4
 8000704:	bf28      	it	cs
 8000706:	2304      	movcs	r3, #4
 8000708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3304      	adds	r3, #4
 800070e:	2b06      	cmp	r3, #6
 8000710:	d902      	bls.n	8000718 <NVIC_EncodePriority+0x30>
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3b03      	subs	r3, #3
 8000716:	e000      	b.n	800071a <NVIC_EncodePriority+0x32>
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	43da      	mvns	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	401a      	ands	r2, r3
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000730:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43d9      	mvns	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	4313      	orrs	r3, r2
         );
}
 8000742:	4618      	mov	r0, r3
 8000744:	3724      	adds	r7, #36	; 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
	...

08000750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000760:	d301      	bcc.n	8000766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000762:	2301      	movs	r3, #1
 8000764:	e00f      	b.n	8000786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <SysTick_Config+0x40>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076e:	210f      	movs	r1, #15
 8000770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000774:	f7ff ff8e 	bl	8000694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <SysTick_Config+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <SysTick_Config+0x40>)
 8000780:	2207      	movs	r2, #7
 8000782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	e000e010 	.word	0xe000e010

08000794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff29 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007bc:	f7ff ff3e 	bl	800063c <__NVIC_GetPriorityGrouping>
 80007c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	6978      	ldr	r0, [r7, #20]
 80007c8:	f7ff ff8e 	bl	80006e8 <NVIC_EncodePriority>
 80007cc:	4602      	mov	r2, r0
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff5d 	bl	8000694 <__NVIC_SetPriority>
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff31 	bl	8000658 <__NVIC_EnableIRQ>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ffa2 	bl	8000750 <SysTick_Config>
 800080c:	4603      	mov	r3, r0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000818:	b480      	push	{r7}
 800081a:	b089      	sub	sp, #36	; 0x24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
 8000836:	e175      	b.n	8000b24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000838:	2201      	movs	r2, #1
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	697a      	ldr	r2, [r7, #20]
 8000848:	4013      	ands	r3, r2
 800084a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	429a      	cmp	r2, r3
 8000852:	f040 8164 	bne.w	8000b1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d003      	beq.n	8000866 <HAL_GPIO_Init+0x4e>
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b12      	cmp	r3, #18
 8000864:	d123      	bne.n	80008ae <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	08da      	lsrs	r2, r3, #3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3208      	adds	r2, #8
 800086e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	220f      	movs	r2, #15
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43db      	mvns	r3, r3
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	4013      	ands	r3, r2
 8000888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	691a      	ldr	r2, [r3, #16]
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	f003 0307 	and.w	r3, r3, #7
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	69ba      	ldr	r2, [r7, #24]
 800089c:	4313      	orrs	r3, r2
 800089e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	08da      	lsrs	r2, r3, #3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3208      	adds	r2, #8
 80008a8:	69b9      	ldr	r1, [r7, #24]
 80008aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	2203      	movs	r2, #3
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	4013      	ands	r3, r2
 80008c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f003 0203 	and.w	r2, r3, #3
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	4313      	orrs	r3, r2
 80008da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	69ba      	ldr	r2, [r7, #24]
 80008e0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d00b      	beq.n	8000902 <HAL_GPIO_Init+0xea>
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d007      	beq.n	8000902 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f6:	2b11      	cmp	r3, #17
 80008f8:	d003      	beq.n	8000902 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	2b12      	cmp	r3, #18
 8000900:	d130      	bne.n	8000964 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	2203      	movs	r2, #3
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43db      	mvns	r3, r3
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	4013      	ands	r3, r2
 8000918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	68da      	ldr	r2, [r3, #12]
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	4313      	orrs	r3, r2
 800092a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000938:	2201      	movs	r2, #1
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	69ba      	ldr	r2, [r7, #24]
 8000944:	4013      	ands	r3, r2
 8000946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	091b      	lsrs	r3, r3, #4
 800094e:	f003 0201 	and.w	r2, r3, #1
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	4313      	orrs	r3, r2
 800095c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	2203      	movs	r2, #3
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	43db      	mvns	r3, r3
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	4013      	ands	r3, r2
 800097a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	689a      	ldr	r2, [r3, #8]
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	4313      	orrs	r3, r2
 800098c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099c:	2b00      	cmp	r3, #0
 800099e:	f000 80be 	beq.w	8000b1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	4b65      	ldr	r3, [pc, #404]	; (8000b38 <HAL_GPIO_Init+0x320>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a64      	ldr	r2, [pc, #400]	; (8000b38 <HAL_GPIO_Init+0x320>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b62      	ldr	r3, [pc, #392]	; (8000b38 <HAL_GPIO_Init+0x320>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80009ba:	4a60      	ldr	r2, [pc, #384]	; (8000b3c <HAL_GPIO_Init+0x324>)
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	089b      	lsrs	r3, r3, #2
 80009c0:	3302      	adds	r3, #2
 80009c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	f003 0303 	and.w	r3, r3, #3
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	220f      	movs	r2, #15
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	4013      	ands	r3, r2
 80009dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a57      	ldr	r2, [pc, #348]	; (8000b40 <HAL_GPIO_Init+0x328>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d037      	beq.n	8000a56 <HAL_GPIO_Init+0x23e>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a56      	ldr	r2, [pc, #344]	; (8000b44 <HAL_GPIO_Init+0x32c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d031      	beq.n	8000a52 <HAL_GPIO_Init+0x23a>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a55      	ldr	r2, [pc, #340]	; (8000b48 <HAL_GPIO_Init+0x330>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d02b      	beq.n	8000a4e <HAL_GPIO_Init+0x236>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a54      	ldr	r2, [pc, #336]	; (8000b4c <HAL_GPIO_Init+0x334>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d025      	beq.n	8000a4a <HAL_GPIO_Init+0x232>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a53      	ldr	r2, [pc, #332]	; (8000b50 <HAL_GPIO_Init+0x338>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d01f      	beq.n	8000a46 <HAL_GPIO_Init+0x22e>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a52      	ldr	r2, [pc, #328]	; (8000b54 <HAL_GPIO_Init+0x33c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d019      	beq.n	8000a42 <HAL_GPIO_Init+0x22a>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a51      	ldr	r2, [pc, #324]	; (8000b58 <HAL_GPIO_Init+0x340>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d013      	beq.n	8000a3e <HAL_GPIO_Init+0x226>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a50      	ldr	r2, [pc, #320]	; (8000b5c <HAL_GPIO_Init+0x344>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d00d      	beq.n	8000a3a <HAL_GPIO_Init+0x222>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a4f      	ldr	r2, [pc, #316]	; (8000b60 <HAL_GPIO_Init+0x348>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d007      	beq.n	8000a36 <HAL_GPIO_Init+0x21e>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a4e      	ldr	r2, [pc, #312]	; (8000b64 <HAL_GPIO_Init+0x34c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d101      	bne.n	8000a32 <HAL_GPIO_Init+0x21a>
 8000a2e:	2309      	movs	r3, #9
 8000a30:	e012      	b.n	8000a58 <HAL_GPIO_Init+0x240>
 8000a32:	230a      	movs	r3, #10
 8000a34:	e010      	b.n	8000a58 <HAL_GPIO_Init+0x240>
 8000a36:	2308      	movs	r3, #8
 8000a38:	e00e      	b.n	8000a58 <HAL_GPIO_Init+0x240>
 8000a3a:	2307      	movs	r3, #7
 8000a3c:	e00c      	b.n	8000a58 <HAL_GPIO_Init+0x240>
 8000a3e:	2306      	movs	r3, #6
 8000a40:	e00a      	b.n	8000a58 <HAL_GPIO_Init+0x240>
 8000a42:	2305      	movs	r3, #5
 8000a44:	e008      	b.n	8000a58 <HAL_GPIO_Init+0x240>
 8000a46:	2304      	movs	r3, #4
 8000a48:	e006      	b.n	8000a58 <HAL_GPIO_Init+0x240>
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	e004      	b.n	8000a58 <HAL_GPIO_Init+0x240>
 8000a4e:	2302      	movs	r3, #2
 8000a50:	e002      	b.n	8000a58 <HAL_GPIO_Init+0x240>
 8000a52:	2301      	movs	r3, #1
 8000a54:	e000      	b.n	8000a58 <HAL_GPIO_Init+0x240>
 8000a56:	2300      	movs	r3, #0
 8000a58:	69fa      	ldr	r2, [r7, #28]
 8000a5a:	f002 0203 	and.w	r2, r2, #3
 8000a5e:	0092      	lsls	r2, r2, #2
 8000a60:	4093      	lsls	r3, r2
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a68:	4934      	ldr	r1, [pc, #208]	; (8000b3c <HAL_GPIO_Init+0x324>)
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	089b      	lsrs	r3, r3, #2
 8000a6e:	3302      	adds	r3, #2
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a76:	4b3c      	ldr	r3, [pc, #240]	; (8000b68 <HAL_GPIO_Init+0x350>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	4013      	ands	r3, r2
 8000a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a92:	69ba      	ldr	r2, [r7, #24]
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a9a:	4a33      	ldr	r2, [pc, #204]	; (8000b68 <HAL_GPIO_Init+0x350>)
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000aa0:	4b31      	ldr	r3, [pc, #196]	; (8000b68 <HAL_GPIO_Init+0x350>)
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	69ba      	ldr	r2, [r7, #24]
 8000aac:	4013      	ands	r3, r2
 8000aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000abc:	69ba      	ldr	r2, [r7, #24]
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ac4:	4a28      	ldr	r2, [pc, #160]	; (8000b68 <HAL_GPIO_Init+0x350>)
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aca:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <HAL_GPIO_Init+0x350>)
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d003      	beq.n	8000aee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000ae6:	69ba      	ldr	r2, [r7, #24]
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aee:	4a1e      	ldr	r2, [pc, #120]	; (8000b68 <HAL_GPIO_Init+0x350>)
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000af4:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <HAL_GPIO_Init+0x350>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	43db      	mvns	r3, r3
 8000afe:	69ba      	ldr	r2, [r7, #24]
 8000b00:	4013      	ands	r3, r2
 8000b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d003      	beq.n	8000b18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b18:	4a13      	ldr	r2, [pc, #76]	; (8000b68 <HAL_GPIO_Init+0x350>)
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3301      	adds	r3, #1
 8000b22:	61fb      	str	r3, [r7, #28]
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	2b0f      	cmp	r3, #15
 8000b28:	f67f ae86 	bls.w	8000838 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	3724      	adds	r7, #36	; 0x24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40013800 	.word	0x40013800
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40020400 	.word	0x40020400
 8000b48:	40020800 	.word	0x40020800
 8000b4c:	40020c00 	.word	0x40020c00
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40021400 	.word	0x40021400
 8000b58:	40021800 	.word	0x40021800
 8000b5c:	40021c00 	.word	0x40021c00
 8000b60:	40022000 	.word	0x40022000
 8000b64:	40022400 	.word	0x40022400
 8000b68:	40013c00 	.word	0x40013c00

08000b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	807b      	strh	r3, [r7, #2]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b7c:	787b      	ldrb	r3, [r7, #1]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b82:	887a      	ldrh	r2, [r7, #2]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000b88:	e003      	b.n	8000b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000b8a:	887b      	ldrh	r3, [r7, #2]
 8000b8c:	041a      	lsls	r2, r3, #16
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	619a      	str	r2, [r3, #24]
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40007000 	.word	0x40007000

08000bc0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <HAL_PWREx_EnableOverDrive+0x98>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	4a22      	ldr	r2, [pc, #136]	; (8000c58 <HAL_PWREx_EnableOverDrive+0x98>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd6:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <HAL_PWREx_EnableOverDrive+0x98>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000be2:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a1d      	ldr	r2, [pc, #116]	; (8000c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bee:	f7ff fcf5 	bl	80005dc <HAL_GetTick>
 8000bf2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000bf4:	e009      	b.n	8000c0a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000bf6:	f7ff fcf1 	bl	80005dc <HAL_GetTick>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c04:	d901      	bls.n	8000c0a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000c06:	2303      	movs	r3, #3
 8000c08:	e022      	b.n	8000c50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c16:	d1ee      	bne.n	8000bf6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000c18:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c24:	f7ff fcda 	bl	80005dc <HAL_GetTick>
 8000c28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c2a:	e009      	b.n	8000c40 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c2c:	f7ff fcd6 	bl	80005dc <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c3a:	d901      	bls.n	8000c40 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	e007      	b.n	8000c50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000c4c:	d1ee      	bne.n	8000c2c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40007000 	.word	0x40007000

08000c60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e25e      	b.n	8001134 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f000 8087 	beq.w	8000d92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c84:	4b96      	ldr	r3, [pc, #600]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	f003 030c 	and.w	r3, r3, #12
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d00c      	beq.n	8000caa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c90:	4b93      	ldr	r3, [pc, #588]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f003 030c 	and.w	r3, r3, #12
 8000c98:	2b08      	cmp	r3, #8
 8000c9a:	d112      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x62>
 8000c9c:	4b90      	ldr	r3, [pc, #576]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ca8:	d10b      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000caa:	4b8d      	ldr	r3, [pc, #564]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d06c      	beq.n	8000d90 <HAL_RCC_OscConfig+0x130>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d168      	bne.n	8000d90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e238      	b.n	8001134 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cca:	d106      	bne.n	8000cda <HAL_RCC_OscConfig+0x7a>
 8000ccc:	4b84      	ldr	r3, [pc, #528]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a83      	ldr	r2, [pc, #524]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	e02e      	b.n	8000d38 <HAL_RCC_OscConfig+0xd8>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d10c      	bne.n	8000cfc <HAL_RCC_OscConfig+0x9c>
 8000ce2:	4b7f      	ldr	r3, [pc, #508]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a7e      	ldr	r2, [pc, #504]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	4b7c      	ldr	r3, [pc, #496]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a7b      	ldr	r2, [pc, #492]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	e01d      	b.n	8000d38 <HAL_RCC_OscConfig+0xd8>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d04:	d10c      	bne.n	8000d20 <HAL_RCC_OscConfig+0xc0>
 8000d06:	4b76      	ldr	r3, [pc, #472]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a75      	ldr	r2, [pc, #468]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	4b73      	ldr	r3, [pc, #460]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a72      	ldr	r2, [pc, #456]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	e00b      	b.n	8000d38 <HAL_RCC_OscConfig+0xd8>
 8000d20:	4b6f      	ldr	r3, [pc, #444]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a6e      	ldr	r2, [pc, #440]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	4b6c      	ldr	r3, [pc, #432]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a6b      	ldr	r2, [pc, #428]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d013      	beq.n	8000d68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d40:	f7ff fc4c 	bl	80005dc <HAL_GetTick>
 8000d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d46:	e008      	b.n	8000d5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d48:	f7ff fc48 	bl	80005dc <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b64      	cmp	r3, #100	; 0x64
 8000d54:	d901      	bls.n	8000d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d56:	2303      	movs	r3, #3
 8000d58:	e1ec      	b.n	8001134 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d5a:	4b61      	ldr	r3, [pc, #388]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0f0      	beq.n	8000d48 <HAL_RCC_OscConfig+0xe8>
 8000d66:	e014      	b.n	8000d92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d68:	f7ff fc38 	bl	80005dc <HAL_GetTick>
 8000d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d6e:	e008      	b.n	8000d82 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d70:	f7ff fc34 	bl	80005dc <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b64      	cmp	r3, #100	; 0x64
 8000d7c:	d901      	bls.n	8000d82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e1d8      	b.n	8001134 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d82:	4b57      	ldr	r3, [pc, #348]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1f0      	bne.n	8000d70 <HAL_RCC_OscConfig+0x110>
 8000d8e:	e000      	b.n	8000d92 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d069      	beq.n	8000e72 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d9e:	4b50      	ldr	r3, [pc, #320]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f003 030c 	and.w	r3, r3, #12
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d00b      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000daa:	4b4d      	ldr	r3, [pc, #308]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f003 030c 	and.w	r3, r3, #12
 8000db2:	2b08      	cmp	r3, #8
 8000db4:	d11c      	bne.n	8000df0 <HAL_RCC_OscConfig+0x190>
 8000db6:	4b4a      	ldr	r3, [pc, #296]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d116      	bne.n	8000df0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dc2:	4b47      	ldr	r3, [pc, #284]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d005      	beq.n	8000dda <HAL_RCC_OscConfig+0x17a>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d001      	beq.n	8000dda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e1ac      	b.n	8001134 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dda:	4b41      	ldr	r3, [pc, #260]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	691b      	ldr	r3, [r3, #16]
 8000de6:	00db      	lsls	r3, r3, #3
 8000de8:	493d      	ldr	r1, [pc, #244]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000dea:	4313      	orrs	r3, r2
 8000dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dee:	e040      	b.n	8000e72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d023      	beq.n	8000e40 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000df8:	4b39      	ldr	r3, [pc, #228]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a38      	ldr	r2, [pc, #224]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e04:	f7ff fbea 	bl	80005dc <HAL_GetTick>
 8000e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e0a:	e008      	b.n	8000e1e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e0c:	f7ff fbe6 	bl	80005dc <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d901      	bls.n	8000e1e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e18a      	b.n	8001134 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e1e:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d0f0      	beq.n	8000e0c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	4929      	ldr	r1, [pc, #164]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	600b      	str	r3, [r1, #0]
 8000e3e:	e018      	b.n	8000e72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e40:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a26      	ldr	r2, [pc, #152]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000e46:	f023 0301 	bic.w	r3, r3, #1
 8000e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fbc6 	bl	80005dc <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e54:	f7ff fbc2 	bl	80005dc <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e166      	b.n	8001134 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e66:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1f0      	bne.n	8000e54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d038      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d019      	beq.n	8000eba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e86:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e8a:	4a15      	ldr	r2, [pc, #84]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e92:	f7ff fba3 	bl	80005dc <HAL_GetTick>
 8000e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e98:	e008      	b.n	8000eac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e9a:	f7ff fb9f 	bl	80005dc <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e143      	b.n	8001134 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0f0      	beq.n	8000e9a <HAL_RCC_OscConfig+0x23a>
 8000eb8:	e01a      	b.n	8000ef0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ebe:	4a08      	ldr	r2, [pc, #32]	; (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000ec0:	f023 0301 	bic.w	r3, r3, #1
 8000ec4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ec6:	f7ff fb89 	bl	80005dc <HAL_GetTick>
 8000eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ecc:	e00a      	b.n	8000ee4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ece:	f7ff fb85 	bl	80005dc <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d903      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e129      	b.n	8001134 <HAL_RCC_OscConfig+0x4d4>
 8000ee0:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ee4:	4b95      	ldr	r3, [pc, #596]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8000ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1ee      	bne.n	8000ece <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 80a4 	beq.w	8001046 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000efe:	4b8f      	ldr	r3, [pc, #572]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10d      	bne.n	8000f26 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	4b8c      	ldr	r3, [pc, #560]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a8b      	ldr	r2, [pc, #556]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b89      	ldr	r3, [pc, #548]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f22:	2301      	movs	r3, #1
 8000f24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f26:	4b86      	ldr	r3, [pc, #536]	; (8001140 <HAL_RCC_OscConfig+0x4e0>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d118      	bne.n	8000f64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000f32:	4b83      	ldr	r3, [pc, #524]	; (8001140 <HAL_RCC_OscConfig+0x4e0>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a82      	ldr	r2, [pc, #520]	; (8001140 <HAL_RCC_OscConfig+0x4e0>)
 8000f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f3e:	f7ff fb4d 	bl	80005dc <HAL_GetTick>
 8000f42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f44:	e008      	b.n	8000f58 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000f46:	f7ff fb49 	bl	80005dc <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b64      	cmp	r3, #100	; 0x64
 8000f52:	d901      	bls.n	8000f58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e0ed      	b.n	8001134 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f58:	4b79      	ldr	r3, [pc, #484]	; (8001140 <HAL_RCC_OscConfig+0x4e0>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d0f0      	beq.n	8000f46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d106      	bne.n	8000f7a <HAL_RCC_OscConfig+0x31a>
 8000f6c:	4b73      	ldr	r3, [pc, #460]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8000f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f70:	4a72      	ldr	r2, [pc, #456]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6713      	str	r3, [r2, #112]	; 0x70
 8000f78:	e02d      	b.n	8000fd6 <HAL_RCC_OscConfig+0x376>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10c      	bne.n	8000f9c <HAL_RCC_OscConfig+0x33c>
 8000f82:	4b6e      	ldr	r3, [pc, #440]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8000f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f86:	4a6d      	ldr	r2, [pc, #436]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8000f88:	f023 0301 	bic.w	r3, r3, #1
 8000f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f8e:	4b6b      	ldr	r3, [pc, #428]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8000f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f92:	4a6a      	ldr	r2, [pc, #424]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8000f94:	f023 0304 	bic.w	r3, r3, #4
 8000f98:	6713      	str	r3, [r2, #112]	; 0x70
 8000f9a:	e01c      	b.n	8000fd6 <HAL_RCC_OscConfig+0x376>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	2b05      	cmp	r3, #5
 8000fa2:	d10c      	bne.n	8000fbe <HAL_RCC_OscConfig+0x35e>
 8000fa4:	4b65      	ldr	r3, [pc, #404]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8000fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fa8:	4a64      	ldr	r2, [pc, #400]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8000faa:	f043 0304 	orr.w	r3, r3, #4
 8000fae:	6713      	str	r3, [r2, #112]	; 0x70
 8000fb0:	4b62      	ldr	r3, [pc, #392]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8000fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fb4:	4a61      	ldr	r2, [pc, #388]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6713      	str	r3, [r2, #112]	; 0x70
 8000fbc:	e00b      	b.n	8000fd6 <HAL_RCC_OscConfig+0x376>
 8000fbe:	4b5f      	ldr	r3, [pc, #380]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8000fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fc2:	4a5e      	ldr	r2, [pc, #376]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8000fc4:	f023 0301 	bic.w	r3, r3, #1
 8000fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8000fca:	4b5c      	ldr	r3, [pc, #368]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8000fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fce:	4a5b      	ldr	r2, [pc, #364]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8000fd0:	f023 0304 	bic.w	r3, r3, #4
 8000fd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d015      	beq.n	800100a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fde:	f7ff fafd 	bl	80005dc <HAL_GetTick>
 8000fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe4:	e00a      	b.n	8000ffc <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fe6:	f7ff faf9 	bl	80005dc <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d901      	bls.n	8000ffc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e09b      	b.n	8001134 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ffc:	4b4f      	ldr	r3, [pc, #316]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8000ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0ee      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x386>
 8001008:	e014      	b.n	8001034 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800100a:	f7ff fae7 	bl	80005dc <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001010:	e00a      	b.n	8001028 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001012:	f7ff fae3 	bl	80005dc <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001020:	4293      	cmp	r3, r2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e085      	b.n	8001134 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001028:	4b44      	ldr	r3, [pc, #272]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 800102a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1ee      	bne.n	8001012 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001034:	7dfb      	ldrb	r3, [r7, #23]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d105      	bne.n	8001046 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800103a:	4b40      	ldr	r3, [pc, #256]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	4a3f      	ldr	r2, [pc, #252]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8001040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001044:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d071      	beq.n	8001132 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800104e:	4b3b      	ldr	r3, [pc, #236]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 030c 	and.w	r3, r3, #12
 8001056:	2b08      	cmp	r3, #8
 8001058:	d069      	beq.n	800112e <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	2b02      	cmp	r3, #2
 8001060:	d14b      	bne.n	80010fa <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001062:	4b36      	ldr	r3, [pc, #216]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a35      	ldr	r2, [pc, #212]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8001068:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800106c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800106e:	f7ff fab5 	bl	80005dc <HAL_GetTick>
 8001072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001074:	e008      	b.n	8001088 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001076:	f7ff fab1 	bl	80005dc <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d901      	bls.n	8001088 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e055      	b.n	8001134 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001088:	4b2c      	ldr	r3, [pc, #176]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f0      	bne.n	8001076 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69da      	ldr	r2, [r3, #28]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	019b      	lsls	r3, r3, #6
 80010a4:	431a      	orrs	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010aa:	085b      	lsrs	r3, r3, #1
 80010ac:	3b01      	subs	r3, #1
 80010ae:	041b      	lsls	r3, r3, #16
 80010b0:	431a      	orrs	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b6:	061b      	lsls	r3, r3, #24
 80010b8:	431a      	orrs	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	071b      	lsls	r3, r3, #28
 80010c0:	491e      	ldr	r1, [pc, #120]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a1c      	ldr	r2, [pc, #112]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 80010cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d2:	f7ff fa83 	bl	80005dc <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010da:	f7ff fa7f 	bl	80005dc <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e023      	b.n	8001134 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0f0      	beq.n	80010da <HAL_RCC_OscConfig+0x47a>
 80010f8:	e01b      	b.n	8001132 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a0f      	ldr	r2, [pc, #60]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8001100:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001106:	f7ff fa69 	bl	80005dc <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800110e:	f7ff fa65 	bl	80005dc <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e009      	b.n	8001134 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_RCC_OscConfig+0x4dc>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1f0      	bne.n	800110e <HAL_RCC_OscConfig+0x4ae>
 800112c:	e001      	b.n	8001132 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40023800 	.word	0x40023800
 8001140:	40007000 	.word	0x40007000

08001144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e0ce      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800115c:	4b69      	ldr	r3, [pc, #420]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 030f 	and.w	r3, r3, #15
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	429a      	cmp	r2, r3
 8001168:	d910      	bls.n	800118c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800116a:	4b66      	ldr	r3, [pc, #408]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f023 020f 	bic.w	r2, r3, #15
 8001172:	4964      	ldr	r1, [pc, #400]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	4313      	orrs	r3, r2
 8001178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800117a:	4b62      	ldr	r3, [pc, #392]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	429a      	cmp	r2, r3
 8001186:	d001      	beq.n	800118c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e0b6      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d020      	beq.n	80011da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d005      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011a4:	4b58      	ldr	r3, [pc, #352]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	4a57      	ldr	r2, [pc, #348]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d005      	beq.n	80011c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011bc:	4b52      	ldr	r3, [pc, #328]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	4a51      	ldr	r2, [pc, #324]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011c8:	4b4f      	ldr	r3, [pc, #316]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	494c      	ldr	r1, [pc, #304]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d040      	beq.n	8001268 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d107      	bne.n	80011fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ee:	4b46      	ldr	r3, [pc, #280]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d115      	bne.n	8001226 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e07d      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b02      	cmp	r3, #2
 8001204:	d107      	bne.n	8001216 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001206:	4b40      	ldr	r3, [pc, #256]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d109      	bne.n	8001226 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e071      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001216:	4b3c      	ldr	r3, [pc, #240]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e069      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001226:	4b38      	ldr	r3, [pc, #224]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f023 0203 	bic.w	r2, r3, #3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	4935      	ldr	r1, [pc, #212]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001234:	4313      	orrs	r3, r2
 8001236:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001238:	f7ff f9d0 	bl	80005dc <HAL_GetTick>
 800123c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800123e:	e00a      	b.n	8001256 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001240:	f7ff f9cc 	bl	80005dc <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	f241 3288 	movw	r2, #5000	; 0x1388
 800124e:	4293      	cmp	r3, r2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e051      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001256:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 020c 	and.w	r2, r3, #12
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	429a      	cmp	r2, r3
 8001266:	d1eb      	bne.n	8001240 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001268:	4b26      	ldr	r3, [pc, #152]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 030f 	and.w	r3, r3, #15
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d210      	bcs.n	8001298 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001276:	4b23      	ldr	r3, [pc, #140]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 020f 	bic.w	r2, r3, #15
 800127e:	4921      	ldr	r1, [pc, #132]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	4313      	orrs	r3, r2
 8001284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <HAL_RCC_ClockConfig+0x1c0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d001      	beq.n	8001298 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e030      	b.n	80012fa <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d008      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012a4:	4b18      	ldr	r3, [pc, #96]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	4915      	ldr	r1, [pc, #84]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d009      	beq.n	80012d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	490d      	ldr	r1, [pc, #52]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	4313      	orrs	r3, r2
 80012d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012d6:	f000 f81d 	bl	8001314 <HAL_RCC_GetSysClockFreq>
 80012da:	4601      	mov	r1, r0
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	091b      	lsrs	r3, r3, #4
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	4a09      	ldr	r2, [pc, #36]	; (800130c <HAL_RCC_ClockConfig+0x1c8>)
 80012e8:	5cd3      	ldrb	r3, [r2, r3]
 80012ea:	fa21 f303 	lsr.w	r3, r1, r3
 80012ee:	4a08      	ldr	r2, [pc, #32]	; (8001310 <HAL_RCC_ClockConfig+0x1cc>)
 80012f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f7ff f92e 	bl	8000554 <HAL_InitTick>

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023c00 	.word	0x40023c00
 8001308:	40023800 	.word	0x40023800
 800130c:	0800457c 	.word	0x0800457c
 8001310:	20000008 	.word	0x20000008

08001314 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800132a:	4b63      	ldr	r3, [pc, #396]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	2b04      	cmp	r3, #4
 8001334:	d007      	beq.n	8001346 <HAL_RCC_GetSysClockFreq+0x32>
 8001336:	2b08      	cmp	r3, #8
 8001338:	d008      	beq.n	800134c <HAL_RCC_GetSysClockFreq+0x38>
 800133a:	2b00      	cmp	r3, #0
 800133c:	f040 80b4 	bne.w	80014a8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001340:	4b5e      	ldr	r3, [pc, #376]	; (80014bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001342:	60bb      	str	r3, [r7, #8]
       break;
 8001344:	e0b3      	b.n	80014ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001346:	4b5e      	ldr	r3, [pc, #376]	; (80014c0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001348:	60bb      	str	r3, [r7, #8]
      break;
 800134a:	e0b0      	b.n	80014ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800134c:	4b5a      	ldr	r3, [pc, #360]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001354:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001356:	4b58      	ldr	r3, [pc, #352]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d04a      	beq.n	80013f8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001362:	4b55      	ldr	r3, [pc, #340]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	099b      	lsrs	r3, r3, #6
 8001368:	f04f 0400 	mov.w	r4, #0
 800136c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	ea03 0501 	and.w	r5, r3, r1
 8001378:	ea04 0602 	and.w	r6, r4, r2
 800137c:	4629      	mov	r1, r5
 800137e:	4632      	mov	r2, r6
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	f04f 0400 	mov.w	r4, #0
 8001388:	0154      	lsls	r4, r2, #5
 800138a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800138e:	014b      	lsls	r3, r1, #5
 8001390:	4619      	mov	r1, r3
 8001392:	4622      	mov	r2, r4
 8001394:	1b49      	subs	r1, r1, r5
 8001396:	eb62 0206 	sbc.w	r2, r2, r6
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	f04f 0400 	mov.w	r4, #0
 80013a2:	0194      	lsls	r4, r2, #6
 80013a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80013a8:	018b      	lsls	r3, r1, #6
 80013aa:	1a5b      	subs	r3, r3, r1
 80013ac:	eb64 0402 	sbc.w	r4, r4, r2
 80013b0:	f04f 0100 	mov.w	r1, #0
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	00e2      	lsls	r2, r4, #3
 80013ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80013be:	00d9      	lsls	r1, r3, #3
 80013c0:	460b      	mov	r3, r1
 80013c2:	4614      	mov	r4, r2
 80013c4:	195b      	adds	r3, r3, r5
 80013c6:	eb44 0406 	adc.w	r4, r4, r6
 80013ca:	f04f 0100 	mov.w	r1, #0
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	0262      	lsls	r2, r4, #9
 80013d4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80013d8:	0259      	lsls	r1, r3, #9
 80013da:	460b      	mov	r3, r1
 80013dc:	4614      	mov	r4, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	4621      	mov	r1, r4
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f04f 0400 	mov.w	r4, #0
 80013e8:	461a      	mov	r2, r3
 80013ea:	4623      	mov	r3, r4
 80013ec:	f7fe ff24 	bl	8000238 <__aeabi_uldivmod>
 80013f0:	4603      	mov	r3, r0
 80013f2:	460c      	mov	r4, r1
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	e049      	b.n	800148c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013f8:	4b2f      	ldr	r3, [pc, #188]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	099b      	lsrs	r3, r3, #6
 80013fe:	f04f 0400 	mov.w	r4, #0
 8001402:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	ea03 0501 	and.w	r5, r3, r1
 800140e:	ea04 0602 	and.w	r6, r4, r2
 8001412:	4629      	mov	r1, r5
 8001414:	4632      	mov	r2, r6
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	f04f 0400 	mov.w	r4, #0
 800141e:	0154      	lsls	r4, r2, #5
 8001420:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001424:	014b      	lsls	r3, r1, #5
 8001426:	4619      	mov	r1, r3
 8001428:	4622      	mov	r2, r4
 800142a:	1b49      	subs	r1, r1, r5
 800142c:	eb62 0206 	sbc.w	r2, r2, r6
 8001430:	f04f 0300 	mov.w	r3, #0
 8001434:	f04f 0400 	mov.w	r4, #0
 8001438:	0194      	lsls	r4, r2, #6
 800143a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800143e:	018b      	lsls	r3, r1, #6
 8001440:	1a5b      	subs	r3, r3, r1
 8001442:	eb64 0402 	sbc.w	r4, r4, r2
 8001446:	f04f 0100 	mov.w	r1, #0
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	00e2      	lsls	r2, r4, #3
 8001450:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001454:	00d9      	lsls	r1, r3, #3
 8001456:	460b      	mov	r3, r1
 8001458:	4614      	mov	r4, r2
 800145a:	195b      	adds	r3, r3, r5
 800145c:	eb44 0406 	adc.w	r4, r4, r6
 8001460:	f04f 0100 	mov.w	r1, #0
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	02a2      	lsls	r2, r4, #10
 800146a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800146e:	0299      	lsls	r1, r3, #10
 8001470:	460b      	mov	r3, r1
 8001472:	4614      	mov	r4, r2
 8001474:	4618      	mov	r0, r3
 8001476:	4621      	mov	r1, r4
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f04f 0400 	mov.w	r4, #0
 800147e:	461a      	mov	r2, r3
 8001480:	4623      	mov	r3, r4
 8001482:	f7fe fed9 	bl	8000238 <__aeabi_uldivmod>
 8001486:	4603      	mov	r3, r0
 8001488:	460c      	mov	r4, r1
 800148a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800148c:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	0c1b      	lsrs	r3, r3, #16
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	3301      	adds	r3, #1
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a4:	60bb      	str	r3, [r7, #8]
      break;
 80014a6:	e002      	b.n	80014ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80014aa:	60bb      	str	r3, [r7, #8]
      break;
 80014ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ae:	68bb      	ldr	r3, [r7, #8]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b8:	40023800 	.word	0x40023800
 80014bc:	00f42400 	.word	0x00f42400
 80014c0:	007a1200 	.word	0x007a1200

080014c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000008 	.word	0x20000008

080014dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014e0:	f7ff fff0 	bl	80014c4 <HAL_RCC_GetHCLKFreq>
 80014e4:	4601      	mov	r1, r0
 80014e6:	4b05      	ldr	r3, [pc, #20]	; (80014fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	0a9b      	lsrs	r3, r3, #10
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	4a03      	ldr	r2, [pc, #12]	; (8001500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014f2:	5cd3      	ldrb	r3, [r2, r3]
 80014f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40023800 	.word	0x40023800
 8001500:	0800458c 	.word	0x0800458c

08001504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001508:	f7ff ffdc 	bl	80014c4 <HAL_RCC_GetHCLKFreq>
 800150c:	4601      	mov	r1, r0
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	0b5b      	lsrs	r3, r3, #13
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	4a03      	ldr	r2, [pc, #12]	; (8001528 <HAL_RCC_GetPCLK2Freq+0x24>)
 800151a:	5cd3      	ldrb	r3, [r2, r3]
 800151c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001520:	4618      	mov	r0, r3
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800
 8001528:	0800458c 	.word	0x0800458c

0800152c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d012      	beq.n	800157a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001554:	4b69      	ldr	r3, [pc, #420]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	4a68      	ldr	r2, [pc, #416]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800155a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800155e:	6093      	str	r3, [r2, #8]
 8001560:	4b66      	ldr	r3, [pc, #408]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001568:	4964      	ldr	r1, [pc, #400]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800156a:	4313      	orrs	r3, r2
 800156c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001576:	2301      	movs	r3, #1
 8001578:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d017      	beq.n	80015b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001586:	4b5d      	ldr	r3, [pc, #372]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800158c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001594:	4959      	ldr	r1, [pc, #356]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001596:	4313      	orrs	r3, r2
 8001598:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015a4:	d101      	bne.n	80015aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80015a6:	2301      	movs	r3, #1
 80015a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d017      	beq.n	80015f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80015c2:	4b4e      	ldr	r3, [pc, #312]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	494a      	ldr	r1, [pc, #296]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015e0:	d101      	bne.n	80015e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80015e2:	2301      	movs	r3, #1
 80015e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80015ee:	2301      	movs	r3, #1
 80015f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80015fe:	2301      	movs	r3, #1
 8001600:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0320 	and.w	r3, r3, #32
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 808b 	beq.w	8001726 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001610:	4b3a      	ldr	r3, [pc, #232]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	4a39      	ldr	r2, [pc, #228]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161a:	6413      	str	r3, [r2, #64]	; 0x40
 800161c:	4b37      	ldr	r3, [pc, #220]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001628:	4b35      	ldr	r3, [pc, #212]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a34      	ldr	r2, [pc, #208]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800162e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001634:	f7fe ffd2 	bl	80005dc <HAL_GetTick>
 8001638:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800163a:	e008      	b.n	800164e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163c:	f7fe ffce 	bl	80005dc <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e38d      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800164e:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800165a:	4b28      	ldr	r3, [pc, #160]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800165c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001662:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d035      	beq.n	80016d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	429a      	cmp	r2, r3
 8001676:	d02e      	beq.n	80016d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001678:	4b20      	ldr	r3, [pc, #128]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001680:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001686:	4a1d      	ldr	r2, [pc, #116]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800168e:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001692:	4a1a      	ldr	r2, [pc, #104]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001698:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800169a:	4a18      	ldr	r2, [pc, #96]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d114      	bne.n	80016d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ac:	f7fe ff96 	bl	80005dc <HAL_GetTick>
 80016b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b2:	e00a      	b.n	80016ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b4:	f7fe ff92 	bl	80005dc <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d901      	bls.n	80016ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e34f      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0ee      	beq.n	80016b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80016e2:	d111      	bne.n	8001708 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80016f2:	400b      	ands	r3, r1
 80016f4:	4901      	ldr	r1, [pc, #4]	; (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
 80016fa:	e00b      	b.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80016fc:	40023800 	.word	0x40023800
 8001700:	40007000 	.word	0x40007000
 8001704:	0ffffcff 	.word	0x0ffffcff
 8001708:	4bb3      	ldr	r3, [pc, #716]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	4ab2      	ldr	r2, [pc, #712]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800170e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001712:	6093      	str	r3, [r2, #8]
 8001714:	4bb0      	ldr	r3, [pc, #704]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001716:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001720:	49ad      	ldr	r1, [pc, #692]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001722:	4313      	orrs	r3, r2
 8001724:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0310 	and.w	r3, r3, #16
 800172e:	2b00      	cmp	r3, #0
 8001730:	d010      	beq.n	8001754 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001732:	4ba9      	ldr	r3, [pc, #676]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001738:	4aa7      	ldr	r2, [pc, #668]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800173a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800173e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001742:	4ba5      	ldr	r3, [pc, #660]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001744:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174c:	49a2      	ldr	r1, [pc, #648]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800174e:	4313      	orrs	r3, r2
 8001750:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00a      	beq.n	8001776 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001760:	4b9d      	ldr	r3, [pc, #628]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001766:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800176e:	499a      	ldr	r1, [pc, #616]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001770:	4313      	orrs	r3, r2
 8001772:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00a      	beq.n	8001798 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001782:	4b95      	ldr	r3, [pc, #596]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001788:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001790:	4991      	ldr	r1, [pc, #580]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001792:	4313      	orrs	r3, r2
 8001794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00a      	beq.n	80017ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80017a4:	4b8c      	ldr	r3, [pc, #560]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80017a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017b2:	4989      	ldr	r1, [pc, #548]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00a      	beq.n	80017dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80017c6:	4b84      	ldr	r3, [pc, #528]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80017c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d4:	4980      	ldr	r1, [pc, #512]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00a      	beq.n	80017fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017e8:	4b7b      	ldr	r3, [pc, #492]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80017ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ee:	f023 0203 	bic.w	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	4978      	ldr	r1, [pc, #480]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00a      	beq.n	8001820 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800180a:	4b73      	ldr	r3, [pc, #460]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800180c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001810:	f023 020c 	bic.w	r2, r3, #12
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001818:	496f      	ldr	r1, [pc, #444]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800181a:	4313      	orrs	r3, r2
 800181c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00a      	beq.n	8001842 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800182c:	4b6a      	ldr	r3, [pc, #424]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800182e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001832:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	4967      	ldr	r1, [pc, #412]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800183c:	4313      	orrs	r3, r2
 800183e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00a      	beq.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800184e:	4b62      	ldr	r3, [pc, #392]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001854:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800185c:	495e      	ldr	r1, [pc, #376]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800185e:	4313      	orrs	r3, r2
 8001860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00a      	beq.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001870:	4b59      	ldr	r3, [pc, #356]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001876:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187e:	4956      	ldr	r1, [pc, #344]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001880:	4313      	orrs	r3, r2
 8001882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00a      	beq.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001892:	4b51      	ldr	r3, [pc, #324]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001898:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a0:	494d      	ldr	r1, [pc, #308]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00a      	beq.n	80018ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80018b4:	4b48      	ldr	r3, [pc, #288]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80018b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c2:	4945      	ldr	r1, [pc, #276]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00a      	beq.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80018d6:	4b40      	ldr	r3, [pc, #256]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80018d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e4:	493c      	ldr	r1, [pc, #240]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00a      	beq.n	800190e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80018f8:	4b37      	ldr	r3, [pc, #220]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80018fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001906:	4934      	ldr	r1, [pc, #208]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001908:	4313      	orrs	r3, r2
 800190a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d011      	beq.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800191a:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800191c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001920:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001928:	492b      	ldr	r1, [pc, #172]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800192a:	4313      	orrs	r3, r2
 800192c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001934:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001938:	d101      	bne.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800193a:	2301      	movs	r3, #1
 800193c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800194a:	2301      	movs	r3, #1
 800194c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00a      	beq.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800195a:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800195c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001960:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001968:	491b      	ldr	r1, [pc, #108]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800196a:	4313      	orrs	r3, r2
 800196c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00b      	beq.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800197c:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800197e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001982:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800198c:	4912      	ldr	r1, [pc, #72]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800198e:	4313      	orrs	r3, r2
 8001990:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00b      	beq.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80019a0:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80019a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019b0:	4909      	ldr	r1, [pc, #36]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00f      	beq.n	80019e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80019c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d4:	e002      	b.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800
 80019dc:	4985      	ldr	r1, [pc, #532]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00b      	beq.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80019f0:	4b80      	ldr	r3, [pc, #512]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80019f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a00:	497c      	ldr	r1, [pc, #496]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d005      	beq.n	8001a1a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a16:	f040 80d6 	bne.w	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001a1a:	4b76      	ldr	r3, [pc, #472]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a75      	ldr	r2, [pc, #468]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001a20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001a24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a26:	f7fe fdd9 	bl	80005dc <HAL_GetTick>
 8001a2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001a2e:	f7fe fdd5 	bl	80005dc <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b64      	cmp	r3, #100	; 0x64
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e194      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001a40:	4b6c      	ldr	r3, [pc, #432]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f0      	bne.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d021      	beq.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d11d      	bne.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001a60:	4b64      	ldr	r3, [pc, #400]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a66:	0c1b      	lsrs	r3, r3, #16
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001a6e:	4b61      	ldr	r3, [pc, #388]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a74:	0e1b      	lsrs	r3, r3, #24
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	019a      	lsls	r2, r3, #6
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	041b      	lsls	r3, r3, #16
 8001a86:	431a      	orrs	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	061b      	lsls	r3, r3, #24
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	071b      	lsls	r3, r3, #28
 8001a94:	4957      	ldr	r1, [pc, #348]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d004      	beq.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ab0:	d00a      	beq.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d02e      	beq.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ac6:	d129      	bne.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001ac8:	4b4a      	ldr	r3, [pc, #296]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ace:	0c1b      	lsrs	r3, r3, #16
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ad6:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001adc:	0f1b      	lsrs	r3, r3, #28
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	019a      	lsls	r2, r3, #6
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	041b      	lsls	r3, r3, #16
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	061b      	lsls	r3, r3, #24
 8001af6:	431a      	orrs	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	071b      	lsls	r3, r3, #28
 8001afc:	493d      	ldr	r1, [pc, #244]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001b04:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b0a:	f023 021f 	bic.w	r2, r3, #31
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	3b01      	subs	r3, #1
 8001b14:	4937      	ldr	r1, [pc, #220]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d01d      	beq.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001b28:	4b32      	ldr	r3, [pc, #200]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b2e:	0e1b      	lsrs	r3, r3, #24
 8001b30:	f003 030f 	and.w	r3, r3, #15
 8001b34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b36:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b3c:	0f1b      	lsrs	r3, r3, #28
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	019a      	lsls	r2, r3, #6
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	041b      	lsls	r3, r3, #16
 8001b50:	431a      	orrs	r2, r3
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	061b      	lsls	r3, r3, #24
 8001b56:	431a      	orrs	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	071b      	lsls	r3, r3, #28
 8001b5c:	4925      	ldr	r1, [pc, #148]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d011      	beq.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	019a      	lsls	r2, r3, #6
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	041b      	lsls	r3, r3, #16
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	061b      	lsls	r3, r3, #24
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	071b      	lsls	r3, r3, #28
 8001b8c:	4919      	ldr	r1, [pc, #100]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001b94:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a16      	ldr	r2, [pc, #88]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001b9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ba0:	f7fe fd1c 	bl	80005dc <HAL_GetTick>
 8001ba4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ba8:	f7fe fd18 	bl	80005dc <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	; 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e0d7      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	f040 80cd 	bne.w	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a08      	ldr	r2, [pc, #32]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bda:	f7fe fcff 	bl	80005dc <HAL_GetTick>
 8001bde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001be0:	e00a      	b.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001be2:	f7fe fcfb 	bl	80005dc <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b64      	cmp	r3, #100	; 0x64
 8001bee:	d903      	bls.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e0ba      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8001bf4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001bf8:	4b5e      	ldr	r3, [pc, #376]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c04:	d0ed      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d009      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d02e      	beq.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d12a      	bne.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001c2e:	4b51      	ldr	r3, [pc, #324]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c34:	0c1b      	lsrs	r3, r3, #16
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001c3c:	4b4d      	ldr	r3, [pc, #308]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c42:	0f1b      	lsrs	r3, r3, #28
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	019a      	lsls	r2, r3, #6
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	041b      	lsls	r3, r3, #16
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	061b      	lsls	r3, r3, #24
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	071b      	lsls	r3, r3, #28
 8001c62:	4944      	ldr	r1, [pc, #272]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001c6a:	4b42      	ldr	r3, [pc, #264]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c70:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	493d      	ldr	r1, [pc, #244]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d022      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c98:	d11d      	bne.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001c9a:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca0:	0e1b      	lsrs	r3, r3, #24
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001ca8:	4b32      	ldr	r3, [pc, #200]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cae:	0f1b      	lsrs	r3, r3, #28
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	019a      	lsls	r2, r3, #6
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	041b      	lsls	r3, r3, #16
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	061b      	lsls	r3, r3, #24
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	071b      	lsls	r3, r3, #28
 8001cce:	4929      	ldr	r1, [pc, #164]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d028      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001ce2:	4b24      	ldr	r3, [pc, #144]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce8:	0e1b      	lsrs	r3, r3, #24
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001cf0:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf6:	0c1b      	lsrs	r3, r3, #16
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	019a      	lsls	r2, r3, #6
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	041b      	lsls	r3, r3, #16
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	061b      	lsls	r3, r3, #24
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	071b      	lsls	r3, r3, #28
 8001d16:	4917      	ldr	r1, [pc, #92]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	4911      	ldr	r1, [pc, #68]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001d34:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0e      	ldr	r2, [pc, #56]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d40:	f7fe fc4c 	bl	80005dc <HAL_GetTick>
 8001d44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001d48:	f7fe fc48 	bl	80005dc <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	; 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e007      	b.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d66:	d1ef      	bne.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3720      	adds	r7, #32
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800

08001d78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e01d      	b.n	8001dc6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d106      	bne.n	8001da4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f001 fd44 	bl	800382c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2202      	movs	r2, #2
 8001da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3304      	adds	r3, #4
 8001db4:	4619      	mov	r1, r3
 8001db6:	4610      	mov	r0, r2
 8001db8:	f000 fa0a 	bl	80021d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d122      	bne.n	8001e2a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d11b      	bne.n	8001e2a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f06f 0202 	mvn.w	r2, #2
 8001dfa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f9bf 	bl	8002194 <HAL_TIM_IC_CaptureCallback>
 8001e16:	e005      	b.n	8001e24 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f9b1 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f9c2 	bl	80021a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d122      	bne.n	8001e7e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d11b      	bne.n	8001e7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f06f 0204 	mvn.w	r2, #4
 8001e4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f995 	bl	8002194 <HAL_TIM_IC_CaptureCallback>
 8001e6a:	e005      	b.n	8001e78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f987 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f998 	bl	80021a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d122      	bne.n	8001ed2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d11b      	bne.n	8001ed2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f06f 0208 	mvn.w	r2, #8
 8001ea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f96b 	bl	8002194 <HAL_TIM_IC_CaptureCallback>
 8001ebe:	e005      	b.n	8001ecc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f95d 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f96e 	bl	80021a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	2b10      	cmp	r3, #16
 8001ede:	d122      	bne.n	8001f26 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d11b      	bne.n	8001f26 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f06f 0210 	mvn.w	r2, #16
 8001ef6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2208      	movs	r2, #8
 8001efc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f941 	bl	8002194 <HAL_TIM_IC_CaptureCallback>
 8001f12:	e005      	b.n	8001f20 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f933 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f944 	bl	80021a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d10e      	bne.n	8001f52 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d107      	bne.n	8001f52 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f06f 0201 	mvn.w	r2, #1
 8001f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f001 f85d 	bl	800300c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5c:	2b80      	cmp	r3, #128	; 0x80
 8001f5e:	d10e      	bne.n	8001f7e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6a:	2b80      	cmp	r3, #128	; 0x80
 8001f6c:	d107      	bne.n	8001f7e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 fac9 	bl	8002510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f8c:	d10e      	bne.n	8001fac <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f98:	2b80      	cmp	r3, #128	; 0x80
 8001f9a:	d107      	bne.n	8001fac <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 fabc 	bl	8002524 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb6:	2b40      	cmp	r3, #64	; 0x40
 8001fb8:	d10e      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc4:	2b40      	cmp	r3, #64	; 0x40
 8001fc6:	d107      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f8f2 	bl	80021bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f003 0320 	and.w	r3, r3, #32
 8001fe2:	2b20      	cmp	r3, #32
 8001fe4:	d10e      	bne.n	8002004 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	2b20      	cmp	r3, #32
 8001ff2:	d107      	bne.n	8002004 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0220 	mvn.w	r2, #32
 8001ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 fa7c 	bl	80024fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_TIM_ConfigClockSource+0x18>
 8002020:	2302      	movs	r3, #2
 8002022:	e0a6      	b.n	8002172 <HAL_TIM_ConfigClockSource+0x166>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4b4f      	ldr	r3, [pc, #316]	; (800217c <HAL_TIM_ConfigClockSource+0x170>)
 8002040:	4013      	ands	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800204a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b40      	cmp	r3, #64	; 0x40
 800205a:	d067      	beq.n	800212c <HAL_TIM_ConfigClockSource+0x120>
 800205c:	2b40      	cmp	r3, #64	; 0x40
 800205e:	d80b      	bhi.n	8002078 <HAL_TIM_ConfigClockSource+0x6c>
 8002060:	2b10      	cmp	r3, #16
 8002062:	d073      	beq.n	800214c <HAL_TIM_ConfigClockSource+0x140>
 8002064:	2b10      	cmp	r3, #16
 8002066:	d802      	bhi.n	800206e <HAL_TIM_ConfigClockSource+0x62>
 8002068:	2b00      	cmp	r3, #0
 800206a:	d06f      	beq.n	800214c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800206c:	e078      	b.n	8002160 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800206e:	2b20      	cmp	r3, #32
 8002070:	d06c      	beq.n	800214c <HAL_TIM_ConfigClockSource+0x140>
 8002072:	2b30      	cmp	r3, #48	; 0x30
 8002074:	d06a      	beq.n	800214c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002076:	e073      	b.n	8002160 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002078:	2b70      	cmp	r3, #112	; 0x70
 800207a:	d00d      	beq.n	8002098 <HAL_TIM_ConfigClockSource+0x8c>
 800207c:	2b70      	cmp	r3, #112	; 0x70
 800207e:	d804      	bhi.n	800208a <HAL_TIM_ConfigClockSource+0x7e>
 8002080:	2b50      	cmp	r3, #80	; 0x50
 8002082:	d033      	beq.n	80020ec <HAL_TIM_ConfigClockSource+0xe0>
 8002084:	2b60      	cmp	r3, #96	; 0x60
 8002086:	d041      	beq.n	800210c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002088:	e06a      	b.n	8002160 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800208a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800208e:	d066      	beq.n	800215e <HAL_TIM_ConfigClockSource+0x152>
 8002090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002094:	d017      	beq.n	80020c6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002096:	e063      	b.n	8002160 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	6899      	ldr	r1, [r3, #8]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f000 f9ac 	bl	8002404 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	609a      	str	r2, [r3, #8]
      break;
 80020c4:	e04c      	b.n	8002160 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6899      	ldr	r1, [r3, #8]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f000 f995 	bl	8002404 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020e8:	609a      	str	r2, [r3, #8]
      break;
 80020ea:	e039      	b.n	8002160 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	6859      	ldr	r1, [r3, #4]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	461a      	mov	r2, r3
 80020fa:	f000 f909 	bl	8002310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2150      	movs	r1, #80	; 0x50
 8002104:	4618      	mov	r0, r3
 8002106:	f000 f962 	bl	80023ce <TIM_ITRx_SetConfig>
      break;
 800210a:	e029      	b.n	8002160 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6818      	ldr	r0, [r3, #0]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	6859      	ldr	r1, [r3, #4]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	461a      	mov	r2, r3
 800211a:	f000 f928 	bl	800236e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2160      	movs	r1, #96	; 0x60
 8002124:	4618      	mov	r0, r3
 8002126:	f000 f952 	bl	80023ce <TIM_ITRx_SetConfig>
      break;
 800212a:	e019      	b.n	8002160 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	6859      	ldr	r1, [r3, #4]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	461a      	mov	r2, r3
 800213a:	f000 f8e9 	bl	8002310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2140      	movs	r1, #64	; 0x40
 8002144:	4618      	mov	r0, r3
 8002146:	f000 f942 	bl	80023ce <TIM_ITRx_SetConfig>
      break;
 800214a:	e009      	b.n	8002160 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4619      	mov	r1, r3
 8002156:	4610      	mov	r0, r2
 8002158:	f000 f939 	bl	80023ce <TIM_ITRx_SetConfig>
      break;
 800215c:	e000      	b.n	8002160 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800215e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	fffeff88 	.word	0xfffeff88

08002180 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a40      	ldr	r2, [pc, #256]	; (80022e4 <TIM_Base_SetConfig+0x114>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d013      	beq.n	8002210 <TIM_Base_SetConfig+0x40>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ee:	d00f      	beq.n	8002210 <TIM_Base_SetConfig+0x40>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a3d      	ldr	r2, [pc, #244]	; (80022e8 <TIM_Base_SetConfig+0x118>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d00b      	beq.n	8002210 <TIM_Base_SetConfig+0x40>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a3c      	ldr	r2, [pc, #240]	; (80022ec <TIM_Base_SetConfig+0x11c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d007      	beq.n	8002210 <TIM_Base_SetConfig+0x40>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a3b      	ldr	r2, [pc, #236]	; (80022f0 <TIM_Base_SetConfig+0x120>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d003      	beq.n	8002210 <TIM_Base_SetConfig+0x40>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a3a      	ldr	r2, [pc, #232]	; (80022f4 <TIM_Base_SetConfig+0x124>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d108      	bne.n	8002222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a2f      	ldr	r2, [pc, #188]	; (80022e4 <TIM_Base_SetConfig+0x114>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d02b      	beq.n	8002282 <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002230:	d027      	beq.n	8002282 <TIM_Base_SetConfig+0xb2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a2c      	ldr	r2, [pc, #176]	; (80022e8 <TIM_Base_SetConfig+0x118>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d023      	beq.n	8002282 <TIM_Base_SetConfig+0xb2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a2b      	ldr	r2, [pc, #172]	; (80022ec <TIM_Base_SetConfig+0x11c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d01f      	beq.n	8002282 <TIM_Base_SetConfig+0xb2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a2a      	ldr	r2, [pc, #168]	; (80022f0 <TIM_Base_SetConfig+0x120>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d01b      	beq.n	8002282 <TIM_Base_SetConfig+0xb2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a29      	ldr	r2, [pc, #164]	; (80022f4 <TIM_Base_SetConfig+0x124>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d017      	beq.n	8002282 <TIM_Base_SetConfig+0xb2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a28      	ldr	r2, [pc, #160]	; (80022f8 <TIM_Base_SetConfig+0x128>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d013      	beq.n	8002282 <TIM_Base_SetConfig+0xb2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a27      	ldr	r2, [pc, #156]	; (80022fc <TIM_Base_SetConfig+0x12c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00f      	beq.n	8002282 <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a26      	ldr	r2, [pc, #152]	; (8002300 <TIM_Base_SetConfig+0x130>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00b      	beq.n	8002282 <TIM_Base_SetConfig+0xb2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a25      	ldr	r2, [pc, #148]	; (8002304 <TIM_Base_SetConfig+0x134>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d007      	beq.n	8002282 <TIM_Base_SetConfig+0xb2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a24      	ldr	r2, [pc, #144]	; (8002308 <TIM_Base_SetConfig+0x138>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d003      	beq.n	8002282 <TIM_Base_SetConfig+0xb2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a23      	ldr	r2, [pc, #140]	; (800230c <TIM_Base_SetConfig+0x13c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d108      	bne.n	8002294 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	4313      	orrs	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	4313      	orrs	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <TIM_Base_SetConfig+0x114>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d003      	beq.n	80022c8 <TIM_Base_SetConfig+0xf8>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a0c      	ldr	r2, [pc, #48]	; (80022f4 <TIM_Base_SetConfig+0x124>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d103      	bne.n	80022d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	615a      	str	r2, [r3, #20]
}
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40010000 	.word	0x40010000
 80022e8:	40000400 	.word	0x40000400
 80022ec:	40000800 	.word	0x40000800
 80022f0:	40000c00 	.word	0x40000c00
 80022f4:	40010400 	.word	0x40010400
 80022f8:	40014000 	.word	0x40014000
 80022fc:	40014400 	.word	0x40014400
 8002300:	40014800 	.word	0x40014800
 8002304:	40001800 	.word	0x40001800
 8002308:	40001c00 	.word	0x40001c00
 800230c:	40002000 	.word	0x40002000

08002310 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002310:	b480      	push	{r7}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	f023 0201 	bic.w	r2, r3, #1
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800233a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4313      	orrs	r3, r2
 8002344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f023 030a 	bic.w	r3, r3, #10
 800234c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	4313      	orrs	r3, r2
 8002354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	621a      	str	r2, [r3, #32]
}
 8002362:	bf00      	nop
 8002364:	371c      	adds	r7, #28
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800236e:	b480      	push	{r7}
 8002370:	b087      	sub	sp, #28
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	f023 0210 	bic.w	r2, r3, #16
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002398:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	031b      	lsls	r3, r3, #12
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	621a      	str	r2, [r3, #32]
}
 80023c2:	bf00      	nop
 80023c4:	371c      	adds	r7, #28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b085      	sub	sp, #20
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f043 0307 	orr.w	r3, r3, #7
 80023f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	609a      	str	r2, [r3, #8]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002404:	b480      	push	{r7}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800241e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	021a      	lsls	r2, r3, #8
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	431a      	orrs	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	4313      	orrs	r3, r2
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	4313      	orrs	r3, r2
 8002430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	609a      	str	r2, [r3, #8]
}
 8002438:	bf00      	nop
 800243a:	371c      	adds	r7, #28
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002458:	2302      	movs	r3, #2
 800245a:	e045      	b.n	80024e8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a1c      	ldr	r2, [pc, #112]	; (80024f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d004      	beq.n	8002490 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a1b      	ldr	r2, [pc, #108]	; (80024f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d108      	bne.n	80024a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002496:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024ba:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	40010000 	.word	0x40010000
 80024f8:	40010400 	.word	0x40010400

080024fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e040      	b.n	80025cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f001 f98c 	bl	8003878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2224      	movs	r2, #36	; 0x24
 8002564:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f98a 	bl	8002890 <UART_SetConfig>
 800257c:	4603      	mov	r3, r0
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e022      	b.n	80025cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fc22 	bl	8002dd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025b2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 fca9 	bl	8002f1c <UART_CheckIdleState>
 80025ca:	4603      	mov	r3, r0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af02      	add	r7, sp, #8
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	d17f      	bne.n	80026ec <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <HAL_UART_Transmit+0x24>
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e078      	b.n	80026ee <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_UART_Transmit+0x36>
 8002606:	2302      	movs	r3, #2
 8002608:	e071      	b.n	80026ee <HAL_UART_Transmit+0x11a>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2221      	movs	r2, #33	; 0x21
 800261c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800261e:	f7fd ffdd 	bl	80005dc <HAL_GetTick>
 8002622:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	88fa      	ldrh	r2, [r7, #6]
 8002628:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	88fa      	ldrh	r2, [r7, #6]
 8002630:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800263c:	d108      	bne.n	8002650 <HAL_UART_Transmit+0x7c>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d104      	bne.n	8002650 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	e003      	b.n	8002658 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002654:	2300      	movs	r3, #0
 8002656:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002658:	e02c      	b.n	80026b4 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2200      	movs	r2, #0
 8002662:	2180      	movs	r1, #128	; 0x80
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fc88 	bl	8002f7a <UART_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e03c      	b.n	80026ee <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10b      	bne.n	8002692 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002688:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	3302      	adds	r3, #2
 800268e:	61bb      	str	r3, [r7, #24]
 8002690:	e007      	b.n	80026a2 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	781a      	ldrb	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	3301      	adds	r3, #1
 80026a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1cc      	bne.n	800265a <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	2200      	movs	r2, #0
 80026c8:	2140      	movs	r1, #64	; 0x40
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 fc55 	bl	8002f7a <UART_WaitOnFlagUntilTimeout>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e009      	b.n	80026ee <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2220      	movs	r2, #32
 80026de:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	e000      	b.n	80026ee <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80026ec:	2302      	movs	r3, #2
  }
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3720      	adds	r7, #32
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b08a      	sub	sp, #40	; 0x28
 80026fa:	af02      	add	r7, sp, #8
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	4613      	mov	r3, r2
 8002704:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800270a:	2b20      	cmp	r3, #32
 800270c:	f040 80ba 	bne.w	8002884 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <HAL_UART_Receive+0x26>
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0b2      	b.n	8002886 <HAL_UART_Receive+0x190>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_UART_Receive+0x38>
 800272a:	2302      	movs	r3, #2
 800272c:	e0ab      	b.n	8002886 <HAL_UART_Receive+0x190>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2222      	movs	r2, #34	; 0x22
 8002740:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002742:	f7fd ff4b 	bl	80005dc <HAL_GetTick>
 8002746:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	88fa      	ldrh	r2, [r7, #6]
 800274c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	88fa      	ldrh	r2, [r7, #6]
 8002754:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002760:	d10e      	bne.n	8002780 <HAL_UART_Receive+0x8a>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d105      	bne.n	8002776 <HAL_UART_Receive+0x80>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002770:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002774:	e02d      	b.n	80027d2 <HAL_UART_Receive+0xdc>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	22ff      	movs	r2, #255	; 0xff
 800277a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800277e:	e028      	b.n	80027d2 <HAL_UART_Receive+0xdc>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10d      	bne.n	80027a4 <HAL_UART_Receive+0xae>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d104      	bne.n	800279a <HAL_UART_Receive+0xa4>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	22ff      	movs	r2, #255	; 0xff
 8002794:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002798:	e01b      	b.n	80027d2 <HAL_UART_Receive+0xdc>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	227f      	movs	r2, #127	; 0x7f
 800279e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027a2:	e016      	b.n	80027d2 <HAL_UART_Receive+0xdc>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027ac:	d10d      	bne.n	80027ca <HAL_UART_Receive+0xd4>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d104      	bne.n	80027c0 <HAL_UART_Receive+0xca>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	227f      	movs	r2, #127	; 0x7f
 80027ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027be:	e008      	b.n	80027d2 <HAL_UART_Receive+0xdc>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	223f      	movs	r2, #63	; 0x3f
 80027c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027c8:	e003      	b.n	80027d2 <HAL_UART_Receive+0xdc>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80027d8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e2:	d108      	bne.n	80027f6 <HAL_UART_Receive+0x100>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d104      	bne.n	80027f6 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	61bb      	str	r3, [r7, #24]
 80027f4:	e003      	b.n	80027fe <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80027fe:	e032      	b.n	8002866 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2200      	movs	r2, #0
 8002808:	2120      	movs	r1, #32
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fbb5 	bl	8002f7a <UART_WaitOnFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e035      	b.n	8002886 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10c      	bne.n	800283a <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	b29a      	uxth	r2, r3
 8002828:	8a7b      	ldrh	r3, [r7, #18]
 800282a:	4013      	ands	r3, r2
 800282c:	b29a      	uxth	r2, r3
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	3302      	adds	r3, #2
 8002836:	61bb      	str	r3, [r7, #24]
 8002838:	e00c      	b.n	8002854 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	b2da      	uxtb	r2, r3
 8002842:	8a7b      	ldrh	r3, [r7, #18]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	4013      	ands	r3, r2
 8002848:	b2da      	uxtb	r2, r3
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3301      	adds	r3, #1
 8002852:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800285a:	b29b      	uxth	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800286c:	b29b      	uxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1c6      	bne.n	8002800 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2220      	movs	r2, #32
 8002876:	679a      	str	r2, [r3, #120]	; 0x78

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	e000      	b.n	8002886 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8002884:	2302      	movs	r3, #2
  }
}
 8002886:	4618      	mov	r0, r3
 8002888:	3720      	adds	r7, #32
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002898:	2300      	movs	r3, #0
 800289a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4bb1      	ldr	r3, [pc, #708]	; (8002b84 <UART_SetConfig+0x2f4>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6812      	ldr	r2, [r2, #0]
 80028c6:	6939      	ldr	r1, [r7, #16]
 80028c8:	430b      	orrs	r3, r1
 80028ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	430a      	orrs	r2, r1
 8002904:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a9f      	ldr	r2, [pc, #636]	; (8002b88 <UART_SetConfig+0x2f8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d121      	bne.n	8002954 <UART_SetConfig+0xc4>
 8002910:	4b9e      	ldr	r3, [pc, #632]	; (8002b8c <UART_SetConfig+0x2fc>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b03      	cmp	r3, #3
 800291c:	d816      	bhi.n	800294c <UART_SetConfig+0xbc>
 800291e:	a201      	add	r2, pc, #4	; (adr r2, 8002924 <UART_SetConfig+0x94>)
 8002920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002924:	08002935 	.word	0x08002935
 8002928:	08002941 	.word	0x08002941
 800292c:	0800293b 	.word	0x0800293b
 8002930:	08002947 	.word	0x08002947
 8002934:	2301      	movs	r3, #1
 8002936:	77fb      	strb	r3, [r7, #31]
 8002938:	e151      	b.n	8002bde <UART_SetConfig+0x34e>
 800293a:	2302      	movs	r3, #2
 800293c:	77fb      	strb	r3, [r7, #31]
 800293e:	e14e      	b.n	8002bde <UART_SetConfig+0x34e>
 8002940:	2304      	movs	r3, #4
 8002942:	77fb      	strb	r3, [r7, #31]
 8002944:	e14b      	b.n	8002bde <UART_SetConfig+0x34e>
 8002946:	2308      	movs	r3, #8
 8002948:	77fb      	strb	r3, [r7, #31]
 800294a:	e148      	b.n	8002bde <UART_SetConfig+0x34e>
 800294c:	2310      	movs	r3, #16
 800294e:	77fb      	strb	r3, [r7, #31]
 8002950:	bf00      	nop
 8002952:	e144      	b.n	8002bde <UART_SetConfig+0x34e>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a8d      	ldr	r2, [pc, #564]	; (8002b90 <UART_SetConfig+0x300>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d134      	bne.n	80029c8 <UART_SetConfig+0x138>
 800295e:	4b8b      	ldr	r3, [pc, #556]	; (8002b8c <UART_SetConfig+0x2fc>)
 8002960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002964:	f003 030c 	and.w	r3, r3, #12
 8002968:	2b0c      	cmp	r3, #12
 800296a:	d829      	bhi.n	80029c0 <UART_SetConfig+0x130>
 800296c:	a201      	add	r2, pc, #4	; (adr r2, 8002974 <UART_SetConfig+0xe4>)
 800296e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002972:	bf00      	nop
 8002974:	080029a9 	.word	0x080029a9
 8002978:	080029c1 	.word	0x080029c1
 800297c:	080029c1 	.word	0x080029c1
 8002980:	080029c1 	.word	0x080029c1
 8002984:	080029b5 	.word	0x080029b5
 8002988:	080029c1 	.word	0x080029c1
 800298c:	080029c1 	.word	0x080029c1
 8002990:	080029c1 	.word	0x080029c1
 8002994:	080029af 	.word	0x080029af
 8002998:	080029c1 	.word	0x080029c1
 800299c:	080029c1 	.word	0x080029c1
 80029a0:	080029c1 	.word	0x080029c1
 80029a4:	080029bb 	.word	0x080029bb
 80029a8:	2300      	movs	r3, #0
 80029aa:	77fb      	strb	r3, [r7, #31]
 80029ac:	e117      	b.n	8002bde <UART_SetConfig+0x34e>
 80029ae:	2302      	movs	r3, #2
 80029b0:	77fb      	strb	r3, [r7, #31]
 80029b2:	e114      	b.n	8002bde <UART_SetConfig+0x34e>
 80029b4:	2304      	movs	r3, #4
 80029b6:	77fb      	strb	r3, [r7, #31]
 80029b8:	e111      	b.n	8002bde <UART_SetConfig+0x34e>
 80029ba:	2308      	movs	r3, #8
 80029bc:	77fb      	strb	r3, [r7, #31]
 80029be:	e10e      	b.n	8002bde <UART_SetConfig+0x34e>
 80029c0:	2310      	movs	r3, #16
 80029c2:	77fb      	strb	r3, [r7, #31]
 80029c4:	bf00      	nop
 80029c6:	e10a      	b.n	8002bde <UART_SetConfig+0x34e>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a71      	ldr	r2, [pc, #452]	; (8002b94 <UART_SetConfig+0x304>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d120      	bne.n	8002a14 <UART_SetConfig+0x184>
 80029d2:	4b6e      	ldr	r3, [pc, #440]	; (8002b8c <UART_SetConfig+0x2fc>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d00f      	beq.n	8002a00 <UART_SetConfig+0x170>
 80029e0:	2b10      	cmp	r3, #16
 80029e2:	d802      	bhi.n	80029ea <UART_SetConfig+0x15a>
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <UART_SetConfig+0x164>
 80029e8:	e010      	b.n	8002a0c <UART_SetConfig+0x17c>
 80029ea:	2b20      	cmp	r3, #32
 80029ec:	d005      	beq.n	80029fa <UART_SetConfig+0x16a>
 80029ee:	2b30      	cmp	r3, #48	; 0x30
 80029f0:	d009      	beq.n	8002a06 <UART_SetConfig+0x176>
 80029f2:	e00b      	b.n	8002a0c <UART_SetConfig+0x17c>
 80029f4:	2300      	movs	r3, #0
 80029f6:	77fb      	strb	r3, [r7, #31]
 80029f8:	e0f1      	b.n	8002bde <UART_SetConfig+0x34e>
 80029fa:	2302      	movs	r3, #2
 80029fc:	77fb      	strb	r3, [r7, #31]
 80029fe:	e0ee      	b.n	8002bde <UART_SetConfig+0x34e>
 8002a00:	2304      	movs	r3, #4
 8002a02:	77fb      	strb	r3, [r7, #31]
 8002a04:	e0eb      	b.n	8002bde <UART_SetConfig+0x34e>
 8002a06:	2308      	movs	r3, #8
 8002a08:	77fb      	strb	r3, [r7, #31]
 8002a0a:	e0e8      	b.n	8002bde <UART_SetConfig+0x34e>
 8002a0c:	2310      	movs	r3, #16
 8002a0e:	77fb      	strb	r3, [r7, #31]
 8002a10:	bf00      	nop
 8002a12:	e0e4      	b.n	8002bde <UART_SetConfig+0x34e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a5f      	ldr	r2, [pc, #380]	; (8002b98 <UART_SetConfig+0x308>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d120      	bne.n	8002a60 <UART_SetConfig+0x1d0>
 8002a1e:	4b5b      	ldr	r3, [pc, #364]	; (8002b8c <UART_SetConfig+0x2fc>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a24:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002a28:	2b40      	cmp	r3, #64	; 0x40
 8002a2a:	d00f      	beq.n	8002a4c <UART_SetConfig+0x1bc>
 8002a2c:	2b40      	cmp	r3, #64	; 0x40
 8002a2e:	d802      	bhi.n	8002a36 <UART_SetConfig+0x1a6>
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <UART_SetConfig+0x1b0>
 8002a34:	e010      	b.n	8002a58 <UART_SetConfig+0x1c8>
 8002a36:	2b80      	cmp	r3, #128	; 0x80
 8002a38:	d005      	beq.n	8002a46 <UART_SetConfig+0x1b6>
 8002a3a:	2bc0      	cmp	r3, #192	; 0xc0
 8002a3c:	d009      	beq.n	8002a52 <UART_SetConfig+0x1c2>
 8002a3e:	e00b      	b.n	8002a58 <UART_SetConfig+0x1c8>
 8002a40:	2300      	movs	r3, #0
 8002a42:	77fb      	strb	r3, [r7, #31]
 8002a44:	e0cb      	b.n	8002bde <UART_SetConfig+0x34e>
 8002a46:	2302      	movs	r3, #2
 8002a48:	77fb      	strb	r3, [r7, #31]
 8002a4a:	e0c8      	b.n	8002bde <UART_SetConfig+0x34e>
 8002a4c:	2304      	movs	r3, #4
 8002a4e:	77fb      	strb	r3, [r7, #31]
 8002a50:	e0c5      	b.n	8002bde <UART_SetConfig+0x34e>
 8002a52:	2308      	movs	r3, #8
 8002a54:	77fb      	strb	r3, [r7, #31]
 8002a56:	e0c2      	b.n	8002bde <UART_SetConfig+0x34e>
 8002a58:	2310      	movs	r3, #16
 8002a5a:	77fb      	strb	r3, [r7, #31]
 8002a5c:	bf00      	nop
 8002a5e:	e0be      	b.n	8002bde <UART_SetConfig+0x34e>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a4d      	ldr	r2, [pc, #308]	; (8002b9c <UART_SetConfig+0x30c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d124      	bne.n	8002ab4 <UART_SetConfig+0x224>
 8002a6a:	4b48      	ldr	r3, [pc, #288]	; (8002b8c <UART_SetConfig+0x2fc>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a78:	d012      	beq.n	8002aa0 <UART_SetConfig+0x210>
 8002a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a7e:	d802      	bhi.n	8002a86 <UART_SetConfig+0x1f6>
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d007      	beq.n	8002a94 <UART_SetConfig+0x204>
 8002a84:	e012      	b.n	8002aac <UART_SetConfig+0x21c>
 8002a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a8a:	d006      	beq.n	8002a9a <UART_SetConfig+0x20a>
 8002a8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a90:	d009      	beq.n	8002aa6 <UART_SetConfig+0x216>
 8002a92:	e00b      	b.n	8002aac <UART_SetConfig+0x21c>
 8002a94:	2300      	movs	r3, #0
 8002a96:	77fb      	strb	r3, [r7, #31]
 8002a98:	e0a1      	b.n	8002bde <UART_SetConfig+0x34e>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	77fb      	strb	r3, [r7, #31]
 8002a9e:	e09e      	b.n	8002bde <UART_SetConfig+0x34e>
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	77fb      	strb	r3, [r7, #31]
 8002aa4:	e09b      	b.n	8002bde <UART_SetConfig+0x34e>
 8002aa6:	2308      	movs	r3, #8
 8002aa8:	77fb      	strb	r3, [r7, #31]
 8002aaa:	e098      	b.n	8002bde <UART_SetConfig+0x34e>
 8002aac:	2310      	movs	r3, #16
 8002aae:	77fb      	strb	r3, [r7, #31]
 8002ab0:	bf00      	nop
 8002ab2:	e094      	b.n	8002bde <UART_SetConfig+0x34e>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a39      	ldr	r2, [pc, #228]	; (8002ba0 <UART_SetConfig+0x310>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d124      	bne.n	8002b08 <UART_SetConfig+0x278>
 8002abe:	4b33      	ldr	r3, [pc, #204]	; (8002b8c <UART_SetConfig+0x2fc>)
 8002ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002acc:	d012      	beq.n	8002af4 <UART_SetConfig+0x264>
 8002ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ad2:	d802      	bhi.n	8002ada <UART_SetConfig+0x24a>
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <UART_SetConfig+0x258>
 8002ad8:	e012      	b.n	8002b00 <UART_SetConfig+0x270>
 8002ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ade:	d006      	beq.n	8002aee <UART_SetConfig+0x25e>
 8002ae0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ae4:	d009      	beq.n	8002afa <UART_SetConfig+0x26a>
 8002ae6:	e00b      	b.n	8002b00 <UART_SetConfig+0x270>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	77fb      	strb	r3, [r7, #31]
 8002aec:	e077      	b.n	8002bde <UART_SetConfig+0x34e>
 8002aee:	2302      	movs	r3, #2
 8002af0:	77fb      	strb	r3, [r7, #31]
 8002af2:	e074      	b.n	8002bde <UART_SetConfig+0x34e>
 8002af4:	2304      	movs	r3, #4
 8002af6:	77fb      	strb	r3, [r7, #31]
 8002af8:	e071      	b.n	8002bde <UART_SetConfig+0x34e>
 8002afa:	2308      	movs	r3, #8
 8002afc:	77fb      	strb	r3, [r7, #31]
 8002afe:	e06e      	b.n	8002bde <UART_SetConfig+0x34e>
 8002b00:	2310      	movs	r3, #16
 8002b02:	77fb      	strb	r3, [r7, #31]
 8002b04:	bf00      	nop
 8002b06:	e06a      	b.n	8002bde <UART_SetConfig+0x34e>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a25      	ldr	r2, [pc, #148]	; (8002ba4 <UART_SetConfig+0x314>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d124      	bne.n	8002b5c <UART_SetConfig+0x2cc>
 8002b12:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <UART_SetConfig+0x2fc>)
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b18:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b20:	d012      	beq.n	8002b48 <UART_SetConfig+0x2b8>
 8002b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b26:	d802      	bhi.n	8002b2e <UART_SetConfig+0x29e>
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d007      	beq.n	8002b3c <UART_SetConfig+0x2ac>
 8002b2c:	e012      	b.n	8002b54 <UART_SetConfig+0x2c4>
 8002b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b32:	d006      	beq.n	8002b42 <UART_SetConfig+0x2b2>
 8002b34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b38:	d009      	beq.n	8002b4e <UART_SetConfig+0x2be>
 8002b3a:	e00b      	b.n	8002b54 <UART_SetConfig+0x2c4>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	77fb      	strb	r3, [r7, #31]
 8002b40:	e04d      	b.n	8002bde <UART_SetConfig+0x34e>
 8002b42:	2302      	movs	r3, #2
 8002b44:	77fb      	strb	r3, [r7, #31]
 8002b46:	e04a      	b.n	8002bde <UART_SetConfig+0x34e>
 8002b48:	2304      	movs	r3, #4
 8002b4a:	77fb      	strb	r3, [r7, #31]
 8002b4c:	e047      	b.n	8002bde <UART_SetConfig+0x34e>
 8002b4e:	2308      	movs	r3, #8
 8002b50:	77fb      	strb	r3, [r7, #31]
 8002b52:	e044      	b.n	8002bde <UART_SetConfig+0x34e>
 8002b54:	2310      	movs	r3, #16
 8002b56:	77fb      	strb	r3, [r7, #31]
 8002b58:	bf00      	nop
 8002b5a:	e040      	b.n	8002bde <UART_SetConfig+0x34e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a11      	ldr	r2, [pc, #68]	; (8002ba8 <UART_SetConfig+0x318>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d139      	bne.n	8002bda <UART_SetConfig+0x34a>
 8002b66:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <UART_SetConfig+0x2fc>)
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b74:	d027      	beq.n	8002bc6 <UART_SetConfig+0x336>
 8002b76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b7a:	d817      	bhi.n	8002bac <UART_SetConfig+0x31c>
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01c      	beq.n	8002bba <UART_SetConfig+0x32a>
 8002b80:	e027      	b.n	8002bd2 <UART_SetConfig+0x342>
 8002b82:	bf00      	nop
 8002b84:	efff69f3 	.word	0xefff69f3
 8002b88:	40011000 	.word	0x40011000
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40004400 	.word	0x40004400
 8002b94:	40004800 	.word	0x40004800
 8002b98:	40004c00 	.word	0x40004c00
 8002b9c:	40005000 	.word	0x40005000
 8002ba0:	40011400 	.word	0x40011400
 8002ba4:	40007800 	.word	0x40007800
 8002ba8:	40007c00 	.word	0x40007c00
 8002bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb0:	d006      	beq.n	8002bc0 <UART_SetConfig+0x330>
 8002bb2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002bb6:	d009      	beq.n	8002bcc <UART_SetConfig+0x33c>
 8002bb8:	e00b      	b.n	8002bd2 <UART_SetConfig+0x342>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	77fb      	strb	r3, [r7, #31]
 8002bbe:	e00e      	b.n	8002bde <UART_SetConfig+0x34e>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	77fb      	strb	r3, [r7, #31]
 8002bc4:	e00b      	b.n	8002bde <UART_SetConfig+0x34e>
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	77fb      	strb	r3, [r7, #31]
 8002bca:	e008      	b.n	8002bde <UART_SetConfig+0x34e>
 8002bcc:	2308      	movs	r3, #8
 8002bce:	77fb      	strb	r3, [r7, #31]
 8002bd0:	e005      	b.n	8002bde <UART_SetConfig+0x34e>
 8002bd2:	2310      	movs	r3, #16
 8002bd4:	77fb      	strb	r3, [r7, #31]
 8002bd6:	bf00      	nop
 8002bd8:	e001      	b.n	8002bde <UART_SetConfig+0x34e>
 8002bda:	2310      	movs	r3, #16
 8002bdc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be6:	d17c      	bne.n	8002ce2 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8002be8:	7ffb      	ldrb	r3, [r7, #31]
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d859      	bhi.n	8002ca2 <UART_SetConfig+0x412>
 8002bee:	a201      	add	r2, pc, #4	; (adr r2, 8002bf4 <UART_SetConfig+0x364>)
 8002bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf4:	08002c19 	.word	0x08002c19
 8002bf8:	08002c37 	.word	0x08002c37
 8002bfc:	08002c55 	.word	0x08002c55
 8002c00:	08002ca3 	.word	0x08002ca3
 8002c04:	08002c6d 	.word	0x08002c6d
 8002c08:	08002ca3 	.word	0x08002ca3
 8002c0c:	08002ca3 	.word	0x08002ca3
 8002c10:	08002ca3 	.word	0x08002ca3
 8002c14:	08002c8b 	.word	0x08002c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002c18:	f7fe fc60 	bl	80014dc <HAL_RCC_GetPCLK1Freq>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	005a      	lsls	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	085b      	lsrs	r3, r3, #1
 8002c26:	441a      	add	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	61bb      	str	r3, [r7, #24]
        break;
 8002c34:	e038      	b.n	8002ca8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c36:	f7fe fc65 	bl	8001504 <HAL_RCC_GetPCLK2Freq>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	005a      	lsls	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	085b      	lsrs	r3, r3, #1
 8002c44:	441a      	add	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	61bb      	str	r3, [r7, #24]
        break;
 8002c52:	e029      	b.n	8002ca8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	085a      	lsrs	r2, r3, #1
 8002c5a:	4b5d      	ldr	r3, [pc, #372]	; (8002dd0 <UART_SetConfig+0x540>)
 8002c5c:	4413      	add	r3, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6852      	ldr	r2, [r2, #4]
 8002c62:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	61bb      	str	r3, [r7, #24]
        break;
 8002c6a:	e01d      	b.n	8002ca8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c6c:	f7fe fb52 	bl	8001314 <HAL_RCC_GetSysClockFreq>
 8002c70:	4603      	mov	r3, r0
 8002c72:	005a      	lsls	r2, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	085b      	lsrs	r3, r3, #1
 8002c7a:	441a      	add	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	61bb      	str	r3, [r7, #24]
        break;
 8002c88:	e00e      	b.n	8002ca8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	085b      	lsrs	r3, r3, #1
 8002c90:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	61bb      	str	r3, [r7, #24]
        break;
 8002ca0:	e002      	b.n	8002ca8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	75fb      	strb	r3, [r7, #23]
        break;
 8002ca6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	2b0f      	cmp	r3, #15
 8002cac:	d916      	bls.n	8002cdc <UART_SetConfig+0x44c>
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb4:	d212      	bcs.n	8002cdc <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	f023 030f 	bic.w	r3, r3, #15
 8002cbe:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	085b      	lsrs	r3, r3, #1
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	89fb      	ldrh	r3, [r7, #14]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	89fa      	ldrh	r2, [r7, #14]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	e06e      	b.n	8002dba <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	75fb      	strb	r3, [r7, #23]
 8002ce0:	e06b      	b.n	8002dba <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8002ce2:	7ffb      	ldrb	r3, [r7, #31]
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d857      	bhi.n	8002d98 <UART_SetConfig+0x508>
 8002ce8:	a201      	add	r2, pc, #4	; (adr r2, 8002cf0 <UART_SetConfig+0x460>)
 8002cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cee:	bf00      	nop
 8002cf0:	08002d15 	.word	0x08002d15
 8002cf4:	08002d31 	.word	0x08002d31
 8002cf8:	08002d4d 	.word	0x08002d4d
 8002cfc:	08002d99 	.word	0x08002d99
 8002d00:	08002d65 	.word	0x08002d65
 8002d04:	08002d99 	.word	0x08002d99
 8002d08:	08002d99 	.word	0x08002d99
 8002d0c:	08002d99 	.word	0x08002d99
 8002d10:	08002d81 	.word	0x08002d81
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d14:	f7fe fbe2 	bl	80014dc <HAL_RCC_GetPCLK1Freq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	085b      	lsrs	r3, r3, #1
 8002d20:	441a      	add	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	61bb      	str	r3, [r7, #24]
        break;
 8002d2e:	e036      	b.n	8002d9e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d30:	f7fe fbe8 	bl	8001504 <HAL_RCC_GetPCLK2Freq>
 8002d34:	4602      	mov	r2, r0
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	085b      	lsrs	r3, r3, #1
 8002d3c:	441a      	add	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	61bb      	str	r3, [r7, #24]
        break;
 8002d4a:	e028      	b.n	8002d9e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	085a      	lsrs	r2, r3, #1
 8002d52:	4b20      	ldr	r3, [pc, #128]	; (8002dd4 <UART_SetConfig+0x544>)
 8002d54:	4413      	add	r3, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6852      	ldr	r2, [r2, #4]
 8002d5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	61bb      	str	r3, [r7, #24]
        break;
 8002d62:	e01c      	b.n	8002d9e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d64:	f7fe fad6 	bl	8001314 <HAL_RCC_GetSysClockFreq>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	085b      	lsrs	r3, r3, #1
 8002d70:	441a      	add	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	61bb      	str	r3, [r7, #24]
        break;
 8002d7e:	e00e      	b.n	8002d9e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	085b      	lsrs	r3, r3, #1
 8002d86:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	61bb      	str	r3, [r7, #24]
        break;
 8002d96:	e002      	b.n	8002d9e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	75fb      	strb	r3, [r7, #23]
        break;
 8002d9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	2b0f      	cmp	r3, #15
 8002da2:	d908      	bls.n	8002db6 <UART_SetConfig+0x526>
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002daa:	d204      	bcs.n	8002db6 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	60da      	str	r2, [r3, #12]
 8002db4:	e001      	b.n	8002dba <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3720      	adds	r7, #32
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	01e84800 	.word	0x01e84800
 8002dd4:	00f42400 	.word	0x00f42400

08002dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01a      	beq.n	8002eee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ed6:	d10a      	bne.n	8002eee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	605a      	str	r2, [r3, #4]
  }
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002f2a:	f7fd fb57 	bl	80005dc <HAL_GetTick>
 8002f2e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d10e      	bne.n	8002f5c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f814 	bl	8002f7a <UART_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e00a      	b.n	8002f72 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	603b      	str	r3, [r7, #0]
 8002f86:	4613      	mov	r3, r2
 8002f88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f8a:	e02a      	b.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f92:	d026      	beq.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f94:	f7fd fb22 	bl	80005dc <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d302      	bcc.n	8002faa <UART_WaitOnFlagUntilTimeout+0x30>
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d11b      	bne.n	8002fe2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fb8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0201 	bic.w	r2, r2, #1
 8002fc8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e00f      	b.n	8003002 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69da      	ldr	r2, [r3, #28]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	4013      	ands	r3, r2
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	bf0c      	ite	eq
 8002ff2:	2301      	moveq	r3, #1
 8002ff4:	2300      	movne	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d0c5      	beq.n	8002f8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	if(head2!=NULL)
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d009      	beq.n	8003030 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		print_list(head2);
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f000 fa81 	bl	8003528 <print_list>
		DeleteLastNode(head2);
 8003026:	4b04      	ldr	r3, [pc, #16]	; (8003038 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fb36 	bl	800369c <DeleteLastNode>
	}
}
 8003030:	bf00      	nop
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	20000090 	.word	0x20000090

0800303c <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003042:	f7fd fa79 	bl	8000538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003046:	f000 f837 	bl	80030b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800304a:	f000 f945 	bl	80032d8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800304e:	f000 f913 	bl	8003278 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8003052:	f000 f8c3 	bl	80031dc <MX_TIM3_Init>
  {


		char* dep; //call to
		char* mes;
		dep= callto();
 8003056:	f000 fa83 	bl	8003560 <callto>
 800305a:	6078      	str	r0, [r7, #4]
		mes=message();
 800305c:	f000 fab8 	bl	80035d0 <message>
 8003060:	6038      	str	r0, [r7, #0]
		head1=CreateNode(head1,mes,dep);
 8003062:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <main+0x74>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6839      	ldr	r1, [r7, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fa38 	bl	80034e0 <CreateNode>
 8003070:	4602      	mov	r2, r0
 8003072:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <main+0x74>)
 8003074:	601a      	str	r2, [r3, #0]
		dep= callto();
 8003076:	f000 fa73 	bl	8003560 <callto>
 800307a:	6078      	str	r0, [r7, #4]
		mes=message();
 800307c:	f000 faa8 	bl	80035d0 <message>
 8003080:	6038      	str	r0, [r7, #0]
		head1=CreateNode(head1,mes,dep);
 8003082:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <main+0x74>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6839      	ldr	r1, [r7, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fa28 	bl	80034e0 <CreateNode>
 8003090:	4602      	mov	r2, r0
 8003092:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <main+0x74>)
 8003094:	601a      	str	r2, [r3, #0]
		if(head2==NULL)
 8003096:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <main+0x78>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1db      	bne.n	8003056 <main+0x1a>
		{
			head2=DeleteLastNode(head1);
 800309e:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <main+0x74>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fafa 	bl	800369c <DeleteLastNode>
 80030a8:	4602      	mov	r2, r0
 80030aa:	4b02      	ldr	r3, [pc, #8]	; (80030b4 <main+0x78>)
 80030ac:	601a      	str	r2, [r3, #0]
  {
 80030ae:	e7d2      	b.n	8003056 <main+0x1a>
 80030b0:	2000008c 	.word	0x2000008c
 80030b4:	20000090 	.word	0x20000090

080030b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b0b8      	sub	sp, #224	; 0xe0
 80030bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80030c2:	2234      	movs	r2, #52	; 0x34
 80030c4:	2100      	movs	r1, #0
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fd44 	bl	8003b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030dc:	f107 0308 	add.w	r3, r7, #8
 80030e0:	2290      	movs	r2, #144	; 0x90
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 fd35 	bl	8003b54 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80030ea:	f7fd fd59 	bl	8000ba0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ee:	4b39      	ldr	r3, [pc, #228]	; (80031d4 <SystemClock_Config+0x11c>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	4a38      	ldr	r2, [pc, #224]	; (80031d4 <SystemClock_Config+0x11c>)
 80030f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f8:	6413      	str	r3, [r2, #64]	; 0x40
 80030fa:	4b36      	ldr	r3, [pc, #216]	; (80031d4 <SystemClock_Config+0x11c>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	607b      	str	r3, [r7, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003106:	4b34      	ldr	r3, [pc, #208]	; (80031d8 <SystemClock_Config+0x120>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800310e:	4a32      	ldr	r2, [pc, #200]	; (80031d8 <SystemClock_Config+0x120>)
 8003110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	4b30      	ldr	r3, [pc, #192]	; (80031d8 <SystemClock_Config+0x120>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003122:	2301      	movs	r3, #1
 8003124:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003128:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800312c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003130:	2302      	movs	r3, #2
 8003132:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003136:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800313a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800313e:	2304      	movs	r3, #4
 8003140:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003144:	2360      	movs	r3, #96	; 0x60
 8003146:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800314a:	2302      	movs	r3, #2
 800314c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003150:	2304      	movs	r3, #4
 8003152:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003156:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800315a:	4618      	mov	r0, r3
 800315c:	f7fd fd80 	bl	8000c60 <HAL_RCC_OscConfig>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8003166:	f000 fb35 	bl	80037d4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800316a:	f7fd fd29 	bl	8000bc0 <HAL_PWREx_EnableOverDrive>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003174:	f000 fb2e 	bl	80037d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003178:	230f      	movs	r3, #15
 800317a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800317e:	2302      	movs	r3, #2
 8003180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003184:	2300      	movs	r3, #0
 8003186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800318a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800318e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003192:	2300      	movs	r3, #0
 8003194:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003198:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800319c:	2103      	movs	r1, #3
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fd ffd0 	bl	8001144 <HAL_RCC_ClockConfig>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80031aa:	f000 fb13 	bl	80037d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80031ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031b2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80031b4:	2300      	movs	r3, #0
 80031b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031b8:	f107 0308 	add.w	r3, r7, #8
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fe f9b5 	bl	800152c <HAL_RCCEx_PeriphCLKConfig>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <SystemClock_Config+0x114>
  {
    Error_Handler();
 80031c8:	f000 fb04 	bl	80037d4 <Error_Handler>
  }
}
 80031cc:	bf00      	nop
 80031ce:	37e0      	adds	r7, #224	; 0xe0
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40007000 	.word	0x40007000

080031dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031e2:	f107 0310 	add.w	r3, r7, #16
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	609a      	str	r2, [r3, #8]
 80031ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031f0:	1d3b      	adds	r3, r7, #4
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	605a      	str	r2, [r3, #4]
 80031f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80031fa:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <MX_TIM3_Init+0x94>)
 80031fc:	4a1d      	ldr	r2, [pc, #116]	; (8003274 <MX_TIM3_Init+0x98>)
 80031fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003200:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <MX_TIM3_Init+0x94>)
 8003202:	2200      	movs	r2, #0
 8003204:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003206:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <MX_TIM3_Init+0x94>)
 8003208:	2200      	movs	r2, #0
 800320a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 47619;
 800320c:	4b18      	ldr	r3, [pc, #96]	; (8003270 <MX_TIM3_Init+0x94>)
 800320e:	f64b 2203 	movw	r2, #47619	; 0xba03
 8003212:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003214:	4b16      	ldr	r3, [pc, #88]	; (8003270 <MX_TIM3_Init+0x94>)
 8003216:	2200      	movs	r2, #0
 8003218:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <MX_TIM3_Init+0x94>)
 800321c:	2200      	movs	r2, #0
 800321e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003220:	4813      	ldr	r0, [pc, #76]	; (8003270 <MX_TIM3_Init+0x94>)
 8003222:	f7fe fda9 	bl	8001d78 <HAL_TIM_Base_Init>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800322c:	f000 fad2 	bl	80037d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003234:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003236:	f107 0310 	add.w	r3, r7, #16
 800323a:	4619      	mov	r1, r3
 800323c:	480c      	ldr	r0, [pc, #48]	; (8003270 <MX_TIM3_Init+0x94>)
 800323e:	f7fe fee5 	bl	800200c <HAL_TIM_ConfigClockSource>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003248:	f000 fac4 	bl	80037d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800324c:	2300      	movs	r3, #0
 800324e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003254:	1d3b      	adds	r3, r7, #4
 8003256:	4619      	mov	r1, r3
 8003258:	4805      	ldr	r0, [pc, #20]	; (8003270 <MX_TIM3_Init+0x94>)
 800325a:	f7ff f8f3 	bl	8002444 <HAL_TIMEx_MasterConfigSynchronization>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003264:	f000 fab6 	bl	80037d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003268:	bf00      	nop
 800326a:	3720      	adds	r7, #32
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20000124 	.word	0x20000124
 8003274:	40000400 	.word	0x40000400

08003278 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800327c:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <MX_USART3_UART_Init+0x58>)
 800327e:	4a15      	ldr	r2, [pc, #84]	; (80032d4 <MX_USART3_UART_Init+0x5c>)
 8003280:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003282:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <MX_USART3_UART_Init+0x58>)
 8003284:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003288:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800328a:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <MX_USART3_UART_Init+0x58>)
 800328c:	2200      	movs	r2, #0
 800328e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003290:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <MX_USART3_UART_Init+0x58>)
 8003292:	2200      	movs	r2, #0
 8003294:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003296:	4b0e      	ldr	r3, [pc, #56]	; (80032d0 <MX_USART3_UART_Init+0x58>)
 8003298:	2200      	movs	r2, #0
 800329a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <MX_USART3_UART_Init+0x58>)
 800329e:	220c      	movs	r2, #12
 80032a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <MX_USART3_UART_Init+0x58>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80032a8:	4b09      	ldr	r3, [pc, #36]	; (80032d0 <MX_USART3_UART_Init+0x58>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032ae:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <MX_USART3_UART_Init+0x58>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <MX_USART3_UART_Init+0x58>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80032ba:	4805      	ldr	r0, [pc, #20]	; (80032d0 <MX_USART3_UART_Init+0x58>)
 80032bc:	f7ff f93c 	bl	8002538 <HAL_UART_Init>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80032c6:	f000 fa85 	bl	80037d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80032ca:	bf00      	nop
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	200000a4 	.word	0x200000a4
 80032d4:	40004800 	.word	0x40004800

080032d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08c      	sub	sp, #48	; 0x30
 80032dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032de:	f107 031c 	add.w	r3, r7, #28
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	605a      	str	r2, [r3, #4]
 80032e8:	609a      	str	r2, [r3, #8]
 80032ea:	60da      	str	r2, [r3, #12]
 80032ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032ee:	4b76      	ldr	r3, [pc, #472]	; (80034c8 <MX_GPIO_Init+0x1f0>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	4a75      	ldr	r2, [pc, #468]	; (80034c8 <MX_GPIO_Init+0x1f0>)
 80032f4:	f043 0304 	orr.w	r3, r3, #4
 80032f8:	6313      	str	r3, [r2, #48]	; 0x30
 80032fa:	4b73      	ldr	r3, [pc, #460]	; (80034c8 <MX_GPIO_Init+0x1f0>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	61bb      	str	r3, [r7, #24]
 8003304:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003306:	4b70      	ldr	r3, [pc, #448]	; (80034c8 <MX_GPIO_Init+0x1f0>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	4a6f      	ldr	r2, [pc, #444]	; (80034c8 <MX_GPIO_Init+0x1f0>)
 800330c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003310:	6313      	str	r3, [r2, #48]	; 0x30
 8003312:	4b6d      	ldr	r3, [pc, #436]	; (80034c8 <MX_GPIO_Init+0x1f0>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800331e:	4b6a      	ldr	r3, [pc, #424]	; (80034c8 <MX_GPIO_Init+0x1f0>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	4a69      	ldr	r2, [pc, #420]	; (80034c8 <MX_GPIO_Init+0x1f0>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	6313      	str	r3, [r2, #48]	; 0x30
 800332a:	4b67      	ldr	r3, [pc, #412]	; (80034c8 <MX_GPIO_Init+0x1f0>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003336:	4b64      	ldr	r3, [pc, #400]	; (80034c8 <MX_GPIO_Init+0x1f0>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	4a63      	ldr	r2, [pc, #396]	; (80034c8 <MX_GPIO_Init+0x1f0>)
 800333c:	f043 0302 	orr.w	r3, r3, #2
 8003340:	6313      	str	r3, [r2, #48]	; 0x30
 8003342:	4b61      	ldr	r3, [pc, #388]	; (80034c8 <MX_GPIO_Init+0x1f0>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800334e:	4b5e      	ldr	r3, [pc, #376]	; (80034c8 <MX_GPIO_Init+0x1f0>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	4a5d      	ldr	r2, [pc, #372]	; (80034c8 <MX_GPIO_Init+0x1f0>)
 8003354:	f043 0308 	orr.w	r3, r3, #8
 8003358:	6313      	str	r3, [r2, #48]	; 0x30
 800335a:	4b5b      	ldr	r3, [pc, #364]	; (80034c8 <MX_GPIO_Init+0x1f0>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003366:	4b58      	ldr	r3, [pc, #352]	; (80034c8 <MX_GPIO_Init+0x1f0>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	4a57      	ldr	r2, [pc, #348]	; (80034c8 <MX_GPIO_Init+0x1f0>)
 800336c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003370:	6313      	str	r3, [r2, #48]	; 0x30
 8003372:	4b55      	ldr	r3, [pc, #340]	; (80034c8 <MX_GPIO_Init+0x1f0>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337a:	607b      	str	r3, [r7, #4]
 800337c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800337e:	2200      	movs	r2, #0
 8003380:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8003384:	4851      	ldr	r0, [pc, #324]	; (80034cc <MX_GPIO_Init+0x1f4>)
 8003386:	f7fd fbf1 	bl	8000b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800338a:	2200      	movs	r2, #0
 800338c:	2140      	movs	r1, #64	; 0x40
 800338e:	4850      	ldr	r0, [pc, #320]	; (80034d0 <MX_GPIO_Init+0x1f8>)
 8003390:	f7fd fbec 	bl	8000b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800339a:	4b4e      	ldr	r3, [pc, #312]	; (80034d4 <MX_GPIO_Init+0x1fc>)
 800339c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80033a2:	f107 031c 	add.w	r3, r7, #28
 80033a6:	4619      	mov	r1, r3
 80033a8:	484b      	ldr	r0, [pc, #300]	; (80034d8 <MX_GPIO_Init+0x200>)
 80033aa:	f7fd fa35 	bl	8000818 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80033ae:	2332      	movs	r3, #50	; 0x32
 80033b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b2:	2302      	movs	r3, #2
 80033b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ba:	2303      	movs	r3, #3
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033be:	230b      	movs	r3, #11
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033c2:	f107 031c 	add.w	r3, r7, #28
 80033c6:	4619      	mov	r1, r3
 80033c8:	4843      	ldr	r0, [pc, #268]	; (80034d8 <MX_GPIO_Init+0x200>)
 80033ca:	f7fd fa25 	bl	8000818 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80033ce:	2386      	movs	r3, #134	; 0x86
 80033d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d2:	2302      	movs	r3, #2
 80033d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033da:	2303      	movs	r3, #3
 80033dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033de:	230b      	movs	r3, #11
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e2:	f107 031c 	add.w	r3, r7, #28
 80033e6:	4619      	mov	r1, r3
 80033e8:	483c      	ldr	r0, [pc, #240]	; (80034dc <MX_GPIO_Init+0x204>)
 80033ea:	f7fd fa15 	bl	8000818 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80033ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f4:	2302      	movs	r3, #2
 80033f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033fc:	2303      	movs	r3, #3
 80033fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003400:	230b      	movs	r3, #11
 8003402:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003404:	f107 031c 	add.w	r3, r7, #28
 8003408:	4619      	mov	r1, r3
 800340a:	4830      	ldr	r0, [pc, #192]	; (80034cc <MX_GPIO_Init+0x1f4>)
 800340c:	f7fd fa04 	bl	8000818 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8003410:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8003414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003416:	2301      	movs	r3, #1
 8003418:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341a:	2300      	movs	r3, #0
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341e:	2300      	movs	r3, #0
 8003420:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003422:	f107 031c 	add.w	r3, r7, #28
 8003426:	4619      	mov	r1, r3
 8003428:	4828      	ldr	r0, [pc, #160]	; (80034cc <MX_GPIO_Init+0x1f4>)
 800342a:	f7fd f9f5 	bl	8000818 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800342e:	2340      	movs	r3, #64	; 0x40
 8003430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003432:	2301      	movs	r3, #1
 8003434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	2300      	movs	r3, #0
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343a:	2300      	movs	r3, #0
 800343c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800343e:	f107 031c 	add.w	r3, r7, #28
 8003442:	4619      	mov	r1, r3
 8003444:	4822      	ldr	r0, [pc, #136]	; (80034d0 <MX_GPIO_Init+0x1f8>)
 8003446:	f7fd f9e7 	bl	8000818 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800344a:	2380      	movs	r3, #128	; 0x80
 800344c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800344e:	2300      	movs	r3, #0
 8003450:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003452:	2300      	movs	r3, #0
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003456:	f107 031c 	add.w	r3, r7, #28
 800345a:	4619      	mov	r1, r3
 800345c:	481c      	ldr	r0, [pc, #112]	; (80034d0 <MX_GPIO_Init+0x1f8>)
 800345e:	f7fd f9db 	bl	8000818 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003462:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003468:	2302      	movs	r3, #2
 800346a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346c:	2300      	movs	r3, #0
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003470:	2303      	movs	r3, #3
 8003472:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003474:	230a      	movs	r3, #10
 8003476:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003478:	f107 031c 	add.w	r3, r7, #28
 800347c:	4619      	mov	r1, r3
 800347e:	4817      	ldr	r0, [pc, #92]	; (80034dc <MX_GPIO_Init+0x204>)
 8003480:	f7fd f9ca 	bl	8000818 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800348a:	2300      	movs	r3, #0
 800348c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348e:	2300      	movs	r3, #0
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003492:	f107 031c 	add.w	r3, r7, #28
 8003496:	4619      	mov	r1, r3
 8003498:	4810      	ldr	r0, [pc, #64]	; (80034dc <MX_GPIO_Init+0x204>)
 800349a:	f7fd f9bd 	bl	8000818 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800349e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80034a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a4:	2302      	movs	r3, #2
 80034a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ac:	2303      	movs	r3, #3
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034b0:	230b      	movs	r3, #11
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034b4:	f107 031c 	add.w	r3, r7, #28
 80034b8:	4619      	mov	r1, r3
 80034ba:	4805      	ldr	r0, [pc, #20]	; (80034d0 <MX_GPIO_Init+0x1f8>)
 80034bc:	f7fd f9ac 	bl	8000818 <HAL_GPIO_Init>

}
 80034c0:	bf00      	nop
 80034c2:	3730      	adds	r7, #48	; 0x30
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40020400 	.word	0x40020400
 80034d0:	40021800 	.word	0x40021800
 80034d4:	10110000 	.word	0x10110000
 80034d8:	40020800 	.word	0x40020800
 80034dc:	40020000 	.word	0x40020000

080034e0 <CreateNode>:

/* USER CODE BEGIN 4 */

node* CreateNode(node* head ,char* message,char* dep)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
    node* headTemp = (node*)malloc(sizeof(node));
 80034ec:	200c      	movs	r0, #12
 80034ee:	f000 fb29 	bl	8003b44 <malloc>
 80034f2:	4603      	mov	r3, r0
 80034f4:	617b      	str	r3, [r7, #20]
	if (NULL == headTemp)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d104      	bne.n	8003506 <CreateNode+0x26>
	{
		printf ("error in memory allocation\n");
 80034fc:	4809      	ldr	r0, [pc, #36]	; (8003524 <CreateNode+0x44>)
 80034fe:	f000 fc35 	bl	8003d6c <puts>
		return NULL;
 8003502:	2300      	movs	r3, #0
 8003504:	e009      	b.n	800351a <CreateNode+0x3a>
	}
    headTemp->message=message;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	601a      	str	r2, [r3, #0]
    headTemp->dep=dep;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	605a      	str	r2, [r3, #4]
    headTemp->next=head;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	609a      	str	r2, [r3, #8]
    return headTemp;
 8003518:	697b      	ldr	r3, [r7, #20]

	//message= callto ();
	//printf ("%s",message);
}
 800351a:	4618      	mov	r0, r3
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	080044b4 	.word	0x080044b4

08003528 <print_list>:


void print_list (node *head)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
	node *current= head;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	60fb      	str	r3, [r7, #12]
	while (current!=NULL) {
 8003534:	e00c      	b.n	8003550 <print_list+0x28>
		printf ("%s\n",current->message);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fc16 	bl	8003d6c <puts>
		printf ("%s\n",current->dep);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fc11 	bl	8003d6c <puts>
		current=current->next;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	60fb      	str	r3, [r7, #12]
	while (current!=NULL) {
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1ef      	bne.n	8003536 <print_list+0xe>
	}
}
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <callto>:

char* callto ()
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
	char * dep;
	int r=0;
 8003566:	2300      	movs	r3, #0
 8003568:	603b      	str	r3, [r7, #0]

	r= (rand()%4); //0-3
 800356a:	f000 fc07 	bl	8003d7c <rand>
 800356e:	4603      	mov	r3, r0
 8003570:	425a      	negs	r2, r3
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	f002 0203 	and.w	r2, r2, #3
 800357a:	bf58      	it	pl
 800357c:	4253      	negpl	r3, r2
 800357e:	603b      	str	r3, [r7, #0]

	switch (r)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	2b03      	cmp	r3, #3
 8003584:	d816      	bhi.n	80035b4 <callto+0x54>
 8003586:	a201      	add	r2, pc, #4	; (adr r2, 800358c <callto+0x2c>)
 8003588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358c:	0800359d 	.word	0x0800359d
 8003590:	080035a3 	.word	0x080035a3
 8003594:	080035a9 	.word	0x080035a9
 8003598:	080035af 	.word	0x080035af
	{
		case 0:
		dep= "Police";
 800359c:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <callto+0x60>)
 800359e:	607b      	str	r3, [r7, #4]
		break;
 80035a0:	e008      	b.n	80035b4 <callto+0x54>
		case 1:
		dep= "Fire";
 80035a2:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <callto+0x64>)
 80035a4:	607b      	str	r3, [r7, #4]
		break;
 80035a6:	e005      	b.n	80035b4 <callto+0x54>
		case 2:
		dep= "Ambulance";
 80035a8:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <callto+0x68>)
 80035aa:	607b      	str	r3, [r7, #4]
		break;
 80035ac:	e002      	b.n	80035b4 <callto+0x54>
		case 3:
		dep= "City";
 80035ae:	4b07      	ldr	r3, [pc, #28]	; (80035cc <callto+0x6c>)
 80035b0:	607b      	str	r3, [r7, #4]
		break;
 80035b2:	bf00      	nop

	}


return dep;
 80035b4:	687b      	ldr	r3, [r7, #4]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	080044d0 	.word	0x080044d0
 80035c4:	080044d8 	.word	0x080044d8
 80035c8:	080044e0 	.word	0x080044e0
 80035cc:	080044ec 	.word	0x080044ec

080035d0 <message>:

char* message()
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
	char* message;
	int m=0;
 80035d6:	2300      	movs	r3, #0
 80035d8:	603b      	str	r3, [r7, #0]

	m= (rand()%10); //0-9
 80035da:	f000 fbcf 	bl	8003d7c <rand>
 80035de:	4602      	mov	r2, r0
 80035e0:	4b24      	ldr	r3, [pc, #144]	; (8003674 <message+0xa4>)
 80035e2:	fb83 1302 	smull	r1, r3, r3, r2
 80035e6:	1099      	asrs	r1, r3, #2
 80035e8:	17d3      	asrs	r3, r2, #31
 80035ea:	1ac9      	subs	r1, r1, r3
 80035ec:	460b      	mov	r3, r1
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	603b      	str	r3, [r7, #0]

	switch (m)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2b09      	cmp	r3, #9
 80035fc:	d834      	bhi.n	8003668 <message+0x98>
 80035fe:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <message+0x34>)
 8003600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003604:	0800362d 	.word	0x0800362d
 8003608:	08003633 	.word	0x08003633
 800360c:	08003639 	.word	0x08003639
 8003610:	0800363f 	.word	0x0800363f
 8003614:	08003645 	.word	0x08003645
 8003618:	0800364b 	.word	0x0800364b
 800361c:	08003651 	.word	0x08003651
 8003620:	08003657 	.word	0x08003657
 8003624:	0800365d 	.word	0x0800365d
 8003628:	08003663 	.word	0x08003663
	{
		case 0:
		message= "Help me!";
 800362c:	4b12      	ldr	r3, [pc, #72]	; (8003678 <message+0xa8>)
 800362e:	607b      	str	r3, [r7, #4]
		break;
 8003630:	e01a      	b.n	8003668 <message+0x98>
		case 1:
		message= "Help me ASAP!";
 8003632:	4b12      	ldr	r3, [pc, #72]	; (800367c <message+0xac>)
 8003634:	607b      	str	r3, [r7, #4]
		break;
 8003636:	e017      	b.n	8003668 <message+0x98>
		case 2:
		message= "Fire!";
 8003638:	4b11      	ldr	r3, [pc, #68]	; (8003680 <message+0xb0>)
 800363a:	607b      	str	r3, [r7, #4]
		break;
 800363c:	e014      	b.n	8003668 <message+0x98>
		case 3:
		message= "Hurricane";
 800363e:	4b11      	ldr	r3, [pc, #68]	; (8003684 <message+0xb4>)
 8003640:	607b      	str	r3, [r7, #4]
		break;
 8003642:	e011      	b.n	8003668 <message+0x98>
		case 4:
		message= "Plumbing Issues";
 8003644:	4b10      	ldr	r3, [pc, #64]	; (8003688 <message+0xb8>)
 8003646:	607b      	str	r3, [r7, #4]
		break;
 8003648:	e00e      	b.n	8003668 <message+0x98>
		case 5:
		message= "I need help";
 800364a:	4b10      	ldr	r3, [pc, #64]	; (800368c <message+0xbc>)
 800364c:	607b      	str	r3, [r7, #4]
		break;
 800364e:	e00b      	b.n	8003668 <message+0x98>
		case 6:
		message= "Hurricane";
 8003650:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <message+0xb4>)
 8003652:	607b      	str	r3, [r7, #4]
		break;
 8003654:	e008      	b.n	8003668 <message+0x98>
		case 7:
		message= "I lost my hat and my umbrella";
 8003656:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <message+0xc0>)
 8003658:	607b      	str	r3, [r7, #4]
		break;
 800365a:	e005      	b.n	8003668 <message+0x98>
		case 8:
		message= "I got lost";
 800365c:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <message+0xc4>)
 800365e:	607b      	str	r3, [r7, #4]
		break;
 8003660:	e002      	b.n	8003668 <message+0x98>
		case 9:
		message= "earthquake";
 8003662:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <message+0xc8>)
 8003664:	607b      	str	r3, [r7, #4]
		break;
 8003666:	bf00      	nop

	}



return message;
 8003668:	687b      	ldr	r3, [r7, #4]




}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	66666667 	.word	0x66666667
 8003678:	080044f4 	.word	0x080044f4
 800367c:	08004500 	.word	0x08004500
 8003680:	08004510 	.word	0x08004510
 8003684:	08004518 	.word	0x08004518
 8003688:	08004524 	.word	0x08004524
 800368c:	08004534 	.word	0x08004534
 8003690:	08004540 	.word	0x08004540
 8003694:	08004560 	.word	0x08004560
 8003698:	0800456c 	.word	0x0800456c

0800369c <DeleteLastNode>:

node* DeleteLastNode(node* head)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
	if(head==NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <DeleteLastNode+0x12>
	{

		return NULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	e045      	b.n	800373a <DeleteLastNode+0x9e>
	}

	node* prev= head;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	617b      	str	r3, [r7, #20]

	if (prev->next==NULL) //node is the last element in the linked list
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d11d      	bne.n	80036f6 <DeleteLastNode+0x5a>
	{
		node* headTemp = (node*)malloc(sizeof(node));
 80036ba:	200c      	movs	r0, #12
 80036bc:	f000 fa42 	bl	8003b44 <malloc>
 80036c0:	4603      	mov	r3, r0
 80036c2:	60bb      	str	r3, [r7, #8]
		headTemp->message=prev->message;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	601a      	str	r2, [r3, #0]
		headTemp->dep=prev->dep;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	605a      	str	r2, [r3, #4]
		headTemp->next=NULL;
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2200      	movs	r2, #0
 80036d8:	609a      	str	r2, [r3, #8]
		if(prev==head1)
 80036da:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <DeleteLastNode+0xa8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d103      	bne.n	80036ec <DeleteLastNode+0x50>
		{
			head1=NULL;
 80036e4:	4b17      	ldr	r3, [pc, #92]	; (8003744 <DeleteLastNode+0xa8>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	e002      	b.n	80036f2 <DeleteLastNode+0x56>
		}
		else
		{
			head2=NULL;
 80036ec:	4b16      	ldr	r3, [pc, #88]	; (8003748 <DeleteLastNode+0xac>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
		}

		return headTemp; //return the last node
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	e021      	b.n	800373a <DeleteLastNode+0x9e>
	}

	//there are more elements before the last element in the linked list
	node* last=prev->next;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	613b      	str	r3, [r7, #16]

	while(last->next!=NULL)
 80036fc:	e005      	b.n	800370a <DeleteLastNode+0x6e>
	{
		prev=prev->next; //previous
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	617b      	str	r3, [r7, #20]
		last=last->next; //current
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	613b      	str	r3, [r7, #16]
	while(last->next!=NULL)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f5      	bne.n	80036fe <DeleteLastNode+0x62>
	}
	node* headTemp = (node*)malloc(sizeof(node));
 8003712:	200c      	movs	r0, #12
 8003714:	f000 fa16 	bl	8003b44 <malloc>
 8003718:	4603      	mov	r3, r0
 800371a:	60fb      	str	r3, [r7, #12]
	headTemp->message=last->message;
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	601a      	str	r2, [r3, #0]
	headTemp->dep=last->dep;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	605a      	str	r2, [r3, #4]
	headTemp->next=NULL;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	609a      	str	r2, [r3, #8]
	prev->next=NULL; //disconnects the last node form the first linked list
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2200      	movs	r2, #0
 8003736:	609a      	str	r2, [r3, #8]
	return headTemp; //return the last node from the linked list.
 8003738:	68fb      	ldr	r3, [r7, #12]

}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	2000008c 	.word	0x2000008c
 8003748:	20000090 	.word	0x20000090

0800374c <_write>:

int _write(int file, char *data, int len) {
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
	// arbitrary timeout 1000
	HAL_UART_Transmit(&huart3, (uint8_t*) data, len, 1000);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	b29a      	uxth	r2, r3
 800375c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	4804      	ldr	r0, [pc, #16]	; (8003774 <_write+0x28>)
 8003764:	f7fe ff36 	bl	80025d4 <HAL_UART_Transmit>
	return 0;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	200000a4 	.word	0x200000a4

08003778 <_read>:

int _read(int file, char *ptr, int len) {
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
	HAL_UART_Receive(&huart3, (uint8_t*) ptr++, 1, 0xffff);
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	1c4b      	adds	r3, r1, #1
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800378e:	2201      	movs	r2, #1
 8003790:	480e      	ldr	r0, [pc, #56]	; (80037cc <_read+0x54>)
 8003792:	f7fe ffb0 	bl	80026f6 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, (uint8_t *) (ptr - 1), 1, 10);
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	1e59      	subs	r1, r3, #1
 800379a:	230a      	movs	r3, #10
 800379c:	2201      	movs	r2, #1
 800379e:	480b      	ldr	r0, [pc, #44]	; (80037cc <_read+0x54>)
 80037a0:	f7fe ff18 	bl	80025d4 <HAL_UART_Transmit>

	if (*(ptr - 1) == 0x0D) {
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b0d      	cmp	r3, #13
 80037ac:	d109      	bne.n	80037c2 <_read+0x4a>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n", 1, 10);
 80037ae:	230a      	movs	r3, #10
 80037b0:	2201      	movs	r2, #1
 80037b2:	4907      	ldr	r1, [pc, #28]	; (80037d0 <_read+0x58>)
 80037b4:	4805      	ldr	r0, [pc, #20]	; (80037cc <_read+0x54>)
 80037b6:	f7fe ff0d 	bl	80025d4 <HAL_UART_Transmit>
		*(ptr - 1) = '\n';
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	3b01      	subs	r3, #1
 80037be:	220a      	movs	r2, #10
 80037c0:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 80037c2:	2301      	movs	r3, #1
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	200000a4 	.word	0x200000a4
 80037d0:	08004578 	.word	0x08004578

080037d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80037d8:	bf00      	nop
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
	...

080037e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80037ea:	4b0f      	ldr	r3, [pc, #60]	; (8003828 <HAL_MspInit+0x44>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	4a0e      	ldr	r2, [pc, #56]	; (8003828 <HAL_MspInit+0x44>)
 80037f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f4:	6413      	str	r3, [r2, #64]	; 0x40
 80037f6:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <HAL_MspInit+0x44>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fe:	607b      	str	r3, [r7, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003802:	4b09      	ldr	r3, [pc, #36]	; (8003828 <HAL_MspInit+0x44>)
 8003804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003806:	4a08      	ldr	r2, [pc, #32]	; (8003828 <HAL_MspInit+0x44>)
 8003808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800380c:	6453      	str	r3, [r2, #68]	; 0x44
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <HAL_MspInit+0x44>)
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40023800 	.word	0x40023800

0800382c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a0d      	ldr	r2, [pc, #52]	; (8003870 <HAL_TIM_Base_MspInit+0x44>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d113      	bne.n	8003866 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800383e:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <HAL_TIM_Base_MspInit+0x48>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	4a0c      	ldr	r2, [pc, #48]	; (8003874 <HAL_TIM_Base_MspInit+0x48>)
 8003844:	f043 0302 	orr.w	r3, r3, #2
 8003848:	6413      	str	r3, [r2, #64]	; 0x40
 800384a:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <HAL_TIM_Base_MspInit+0x48>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003856:	2200      	movs	r2, #0
 8003858:	2100      	movs	r1, #0
 800385a:	201d      	movs	r0, #29
 800385c:	f7fc ffa5 	bl	80007aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003860:	201d      	movs	r0, #29
 8003862:	f7fc ffbe 	bl	80007e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003866:	bf00      	nop
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40000400 	.word	0x40000400
 8003874:	40023800 	.word	0x40023800

08003878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08a      	sub	sp, #40	; 0x28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003880:	f107 0314 	add.w	r3, r7, #20
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	60da      	str	r2, [r3, #12]
 800388e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a17      	ldr	r2, [pc, #92]	; (80038f4 <HAL_UART_MspInit+0x7c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d128      	bne.n	80038ec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800389a:	4b17      	ldr	r3, [pc, #92]	; (80038f8 <HAL_UART_MspInit+0x80>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	4a16      	ldr	r2, [pc, #88]	; (80038f8 <HAL_UART_MspInit+0x80>)
 80038a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038a4:	6413      	str	r3, [r2, #64]	; 0x40
 80038a6:	4b14      	ldr	r3, [pc, #80]	; (80038f8 <HAL_UART_MspInit+0x80>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038b2:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <HAL_UART_MspInit+0x80>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	4a10      	ldr	r2, [pc, #64]	; (80038f8 <HAL_UART_MspInit+0x80>)
 80038b8:	f043 0308 	orr.w	r3, r3, #8
 80038bc:	6313      	str	r3, [r2, #48]	; 0x30
 80038be:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <HAL_UART_MspInit+0x80>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80038ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d0:	2302      	movs	r3, #2
 80038d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d8:	2303      	movs	r3, #3
 80038da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80038dc:	2307      	movs	r3, #7
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038e0:	f107 0314 	add.w	r3, r7, #20
 80038e4:	4619      	mov	r1, r3
 80038e6:	4805      	ldr	r0, [pc, #20]	; (80038fc <HAL_UART_MspInit+0x84>)
 80038e8:	f7fc ff96 	bl	8000818 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80038ec:	bf00      	nop
 80038ee:	3728      	adds	r7, #40	; 0x28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40004800 	.word	0x40004800
 80038f8:	40023800 	.word	0x40023800
 80038fc:	40020c00 	.word	0x40020c00

08003900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800390e:	b480      	push	{r7}
 8003910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003912:	e7fe      	b.n	8003912 <HardFault_Handler+0x4>

08003914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003918:	e7fe      	b.n	8003918 <MemManage_Handler+0x4>

0800391a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800391a:	b480      	push	{r7}
 800391c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800391e:	e7fe      	b.n	800391e <BusFault_Handler+0x4>

08003920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003924:	e7fe      	b.n	8003924 <UsageFault_Handler+0x4>

08003926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003926:	b480      	push	{r7}
 8003928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800392a:	bf00      	nop
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003938:	bf00      	nop
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003942:	b480      	push	{r7}
 8003944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003946:	bf00      	nop
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003954:	f7fc fe2e 	bl	80005b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003958:	bf00      	nop
 800395a:	bd80      	pop	{r7, pc}

0800395c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003960:	4802      	ldr	r0, [pc, #8]	; (800396c <TIM3_IRQHandler+0x10>)
 8003962:	f7fe fa34 	bl	8001dce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000124 	.word	0x20000124

08003970 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
	return -1;
 8003978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003998:	605a      	str	r2, [r3, #4]
	return 0;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <_isatty>:

int _isatty(int file)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
	return 1;
 80039b0:	2301      	movs	r3, #1
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039be:	b480      	push	{r7}
 80039c0:	b085      	sub	sp, #20
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	607a      	str	r2, [r7, #4]
	return 0;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <_sbrk+0x50>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d102      	bne.n	80039ee <_sbrk+0x16>
		heap_end = &end;
 80039e8:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <_sbrk+0x50>)
 80039ea:	4a10      	ldr	r2, [pc, #64]	; (8003a2c <_sbrk+0x54>)
 80039ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80039ee:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <_sbrk+0x50>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80039f4:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <_sbrk+0x50>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4413      	add	r3, r2
 80039fc:	466a      	mov	r2, sp
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d907      	bls.n	8003a12 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003a02:	f000 f875 	bl	8003af0 <__errno>
 8003a06:	4602      	mov	r2, r0
 8003a08:	230c      	movs	r3, #12
 8003a0a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a10:	e006      	b.n	8003a20 <_sbrk+0x48>
	}

	heap_end += incr;
 8003a12:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <_sbrk+0x50>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4413      	add	r3, r2
 8003a1a:	4a03      	ldr	r2, [pc, #12]	; (8003a28 <_sbrk+0x50>)
 8003a1c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	20000094 	.word	0x20000094
 8003a2c:	20000168 	.word	0x20000168

08003a30 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a34:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <SystemInit+0x5c>)
 8003a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3a:	4a14      	ldr	r2, [pc, #80]	; (8003a8c <SystemInit+0x5c>)
 8003a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003a44:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <SystemInit+0x60>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a11      	ldr	r2, [pc, #68]	; (8003a90 <SystemInit+0x60>)
 8003a4a:	f043 0301 	orr.w	r3, r3, #1
 8003a4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003a50:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <SystemInit+0x60>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003a56:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <SystemInit+0x60>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	490d      	ldr	r1, [pc, #52]	; (8003a90 <SystemInit+0x60>)
 8003a5c:	4b0d      	ldr	r3, [pc, #52]	; (8003a94 <SystemInit+0x64>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003a62:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <SystemInit+0x60>)
 8003a64:	4a0c      	ldr	r2, [pc, #48]	; (8003a98 <SystemInit+0x68>)
 8003a66:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003a68:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <SystemInit+0x60>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a08      	ldr	r2, [pc, #32]	; (8003a90 <SystemInit+0x60>)
 8003a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003a74:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <SystemInit+0x60>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a7a:	4b04      	ldr	r3, [pc, #16]	; (8003a8c <SystemInit+0x5c>)
 8003a7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a80:	609a      	str	r2, [r3, #8]
#endif
}
 8003a82:	bf00      	nop
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	e000ed00 	.word	0xe000ed00
 8003a90:	40023800 	.word	0x40023800
 8003a94:	fef6ffff 	.word	0xfef6ffff
 8003a98:	24003010 	.word	0x24003010

08003a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ad4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003aa0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003aa2:	e003      	b.n	8003aac <LoopCopyDataInit>

08003aa4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003aa6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003aa8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003aaa:	3104      	adds	r1, #4

08003aac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003aac:	480b      	ldr	r0, [pc, #44]	; (8003adc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003aae:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ab0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ab2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ab4:	d3f6      	bcc.n	8003aa4 <CopyDataInit>
  ldr  r2, =_sbss
 8003ab6:	4a0b      	ldr	r2, [pc, #44]	; (8003ae4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ab8:	e002      	b.n	8003ac0 <LoopFillZerobss>

08003aba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003aba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003abc:	f842 3b04 	str.w	r3, [r2], #4

08003ac0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ac0:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003ac2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003ac4:	d3f9      	bcc.n	8003aba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ac6:	f7ff ffb3 	bl	8003a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003aca:	f000 f817 	bl	8003afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ace:	f7ff fab5 	bl	800303c <main>
  bx  lr    
 8003ad2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ad4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003ad8:	08004608 	.word	0x08004608
  ldr  r0, =_sdata
 8003adc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003ae0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8003ae4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003ae8:	20000168 	.word	0x20000168

08003aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003aec:	e7fe      	b.n	8003aec <ADC_IRQHandler>
	...

08003af0 <__errno>:
 8003af0:	4b01      	ldr	r3, [pc, #4]	; (8003af8 <__errno+0x8>)
 8003af2:	6818      	ldr	r0, [r3, #0]
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	2000000c 	.word	0x2000000c

08003afc <__libc_init_array>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	4e0d      	ldr	r6, [pc, #52]	; (8003b34 <__libc_init_array+0x38>)
 8003b00:	4c0d      	ldr	r4, [pc, #52]	; (8003b38 <__libc_init_array+0x3c>)
 8003b02:	1ba4      	subs	r4, r4, r6
 8003b04:	10a4      	asrs	r4, r4, #2
 8003b06:	2500      	movs	r5, #0
 8003b08:	42a5      	cmp	r5, r4
 8003b0a:	d109      	bne.n	8003b20 <__libc_init_array+0x24>
 8003b0c:	4e0b      	ldr	r6, [pc, #44]	; (8003b3c <__libc_init_array+0x40>)
 8003b0e:	4c0c      	ldr	r4, [pc, #48]	; (8003b40 <__libc_init_array+0x44>)
 8003b10:	f000 fcc4 	bl	800449c <_init>
 8003b14:	1ba4      	subs	r4, r4, r6
 8003b16:	10a4      	asrs	r4, r4, #2
 8003b18:	2500      	movs	r5, #0
 8003b1a:	42a5      	cmp	r5, r4
 8003b1c:	d105      	bne.n	8003b2a <__libc_init_array+0x2e>
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b24:	4798      	blx	r3
 8003b26:	3501      	adds	r5, #1
 8003b28:	e7ee      	b.n	8003b08 <__libc_init_array+0xc>
 8003b2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b2e:	4798      	blx	r3
 8003b30:	3501      	adds	r5, #1
 8003b32:	e7f2      	b.n	8003b1a <__libc_init_array+0x1e>
 8003b34:	08004600 	.word	0x08004600
 8003b38:	08004600 	.word	0x08004600
 8003b3c:	08004600 	.word	0x08004600
 8003b40:	08004604 	.word	0x08004604

08003b44 <malloc>:
 8003b44:	4b02      	ldr	r3, [pc, #8]	; (8003b50 <malloc+0xc>)
 8003b46:	4601      	mov	r1, r0
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	f000 b859 	b.w	8003c00 <_malloc_r>
 8003b4e:	bf00      	nop
 8003b50:	2000000c 	.word	0x2000000c

08003b54 <memset>:
 8003b54:	4402      	add	r2, r0
 8003b56:	4603      	mov	r3, r0
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d100      	bne.n	8003b5e <memset+0xa>
 8003b5c:	4770      	bx	lr
 8003b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b62:	e7f9      	b.n	8003b58 <memset+0x4>

08003b64 <_free_r>:
 8003b64:	b538      	push	{r3, r4, r5, lr}
 8003b66:	4605      	mov	r5, r0
 8003b68:	2900      	cmp	r1, #0
 8003b6a:	d045      	beq.n	8003bf8 <_free_r+0x94>
 8003b6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b70:	1f0c      	subs	r4, r1, #4
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	bfb8      	it	lt
 8003b76:	18e4      	addlt	r4, r4, r3
 8003b78:	f000 fbe2 	bl	8004340 <__malloc_lock>
 8003b7c:	4a1f      	ldr	r2, [pc, #124]	; (8003bfc <_free_r+0x98>)
 8003b7e:	6813      	ldr	r3, [r2, #0]
 8003b80:	4610      	mov	r0, r2
 8003b82:	b933      	cbnz	r3, 8003b92 <_free_r+0x2e>
 8003b84:	6063      	str	r3, [r4, #4]
 8003b86:	6014      	str	r4, [r2, #0]
 8003b88:	4628      	mov	r0, r5
 8003b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b8e:	f000 bbd8 	b.w	8004342 <__malloc_unlock>
 8003b92:	42a3      	cmp	r3, r4
 8003b94:	d90c      	bls.n	8003bb0 <_free_r+0x4c>
 8003b96:	6821      	ldr	r1, [r4, #0]
 8003b98:	1862      	adds	r2, r4, r1
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	bf04      	itt	eq
 8003b9e:	681a      	ldreq	r2, [r3, #0]
 8003ba0:	685b      	ldreq	r3, [r3, #4]
 8003ba2:	6063      	str	r3, [r4, #4]
 8003ba4:	bf04      	itt	eq
 8003ba6:	1852      	addeq	r2, r2, r1
 8003ba8:	6022      	streq	r2, [r4, #0]
 8003baa:	6004      	str	r4, [r0, #0]
 8003bac:	e7ec      	b.n	8003b88 <_free_r+0x24>
 8003bae:	4613      	mov	r3, r2
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	b10a      	cbz	r2, 8003bb8 <_free_r+0x54>
 8003bb4:	42a2      	cmp	r2, r4
 8003bb6:	d9fa      	bls.n	8003bae <_free_r+0x4a>
 8003bb8:	6819      	ldr	r1, [r3, #0]
 8003bba:	1858      	adds	r0, r3, r1
 8003bbc:	42a0      	cmp	r0, r4
 8003bbe:	d10b      	bne.n	8003bd8 <_free_r+0x74>
 8003bc0:	6820      	ldr	r0, [r4, #0]
 8003bc2:	4401      	add	r1, r0
 8003bc4:	1858      	adds	r0, r3, r1
 8003bc6:	4282      	cmp	r2, r0
 8003bc8:	6019      	str	r1, [r3, #0]
 8003bca:	d1dd      	bne.n	8003b88 <_free_r+0x24>
 8003bcc:	6810      	ldr	r0, [r2, #0]
 8003bce:	6852      	ldr	r2, [r2, #4]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	4401      	add	r1, r0
 8003bd4:	6019      	str	r1, [r3, #0]
 8003bd6:	e7d7      	b.n	8003b88 <_free_r+0x24>
 8003bd8:	d902      	bls.n	8003be0 <_free_r+0x7c>
 8003bda:	230c      	movs	r3, #12
 8003bdc:	602b      	str	r3, [r5, #0]
 8003bde:	e7d3      	b.n	8003b88 <_free_r+0x24>
 8003be0:	6820      	ldr	r0, [r4, #0]
 8003be2:	1821      	adds	r1, r4, r0
 8003be4:	428a      	cmp	r2, r1
 8003be6:	bf04      	itt	eq
 8003be8:	6811      	ldreq	r1, [r2, #0]
 8003bea:	6852      	ldreq	r2, [r2, #4]
 8003bec:	6062      	str	r2, [r4, #4]
 8003bee:	bf04      	itt	eq
 8003bf0:	1809      	addeq	r1, r1, r0
 8003bf2:	6021      	streq	r1, [r4, #0]
 8003bf4:	605c      	str	r4, [r3, #4]
 8003bf6:	e7c7      	b.n	8003b88 <_free_r+0x24>
 8003bf8:	bd38      	pop	{r3, r4, r5, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000098 	.word	0x20000098

08003c00 <_malloc_r>:
 8003c00:	b570      	push	{r4, r5, r6, lr}
 8003c02:	1ccd      	adds	r5, r1, #3
 8003c04:	f025 0503 	bic.w	r5, r5, #3
 8003c08:	3508      	adds	r5, #8
 8003c0a:	2d0c      	cmp	r5, #12
 8003c0c:	bf38      	it	cc
 8003c0e:	250c      	movcc	r5, #12
 8003c10:	2d00      	cmp	r5, #0
 8003c12:	4606      	mov	r6, r0
 8003c14:	db01      	blt.n	8003c1a <_malloc_r+0x1a>
 8003c16:	42a9      	cmp	r1, r5
 8003c18:	d903      	bls.n	8003c22 <_malloc_r+0x22>
 8003c1a:	230c      	movs	r3, #12
 8003c1c:	6033      	str	r3, [r6, #0]
 8003c1e:	2000      	movs	r0, #0
 8003c20:	bd70      	pop	{r4, r5, r6, pc}
 8003c22:	f000 fb8d 	bl	8004340 <__malloc_lock>
 8003c26:	4a21      	ldr	r2, [pc, #132]	; (8003cac <_malloc_r+0xac>)
 8003c28:	6814      	ldr	r4, [r2, #0]
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	b991      	cbnz	r1, 8003c54 <_malloc_r+0x54>
 8003c2e:	4c20      	ldr	r4, [pc, #128]	; (8003cb0 <_malloc_r+0xb0>)
 8003c30:	6823      	ldr	r3, [r4, #0]
 8003c32:	b91b      	cbnz	r3, 8003c3c <_malloc_r+0x3c>
 8003c34:	4630      	mov	r0, r6
 8003c36:	f000 f8d5 	bl	8003de4 <_sbrk_r>
 8003c3a:	6020      	str	r0, [r4, #0]
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	4630      	mov	r0, r6
 8003c40:	f000 f8d0 	bl	8003de4 <_sbrk_r>
 8003c44:	1c43      	adds	r3, r0, #1
 8003c46:	d124      	bne.n	8003c92 <_malloc_r+0x92>
 8003c48:	230c      	movs	r3, #12
 8003c4a:	6033      	str	r3, [r6, #0]
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	f000 fb78 	bl	8004342 <__malloc_unlock>
 8003c52:	e7e4      	b.n	8003c1e <_malloc_r+0x1e>
 8003c54:	680b      	ldr	r3, [r1, #0]
 8003c56:	1b5b      	subs	r3, r3, r5
 8003c58:	d418      	bmi.n	8003c8c <_malloc_r+0x8c>
 8003c5a:	2b0b      	cmp	r3, #11
 8003c5c:	d90f      	bls.n	8003c7e <_malloc_r+0x7e>
 8003c5e:	600b      	str	r3, [r1, #0]
 8003c60:	50cd      	str	r5, [r1, r3]
 8003c62:	18cc      	adds	r4, r1, r3
 8003c64:	4630      	mov	r0, r6
 8003c66:	f000 fb6c 	bl	8004342 <__malloc_unlock>
 8003c6a:	f104 000b 	add.w	r0, r4, #11
 8003c6e:	1d23      	adds	r3, r4, #4
 8003c70:	f020 0007 	bic.w	r0, r0, #7
 8003c74:	1ac3      	subs	r3, r0, r3
 8003c76:	d0d3      	beq.n	8003c20 <_malloc_r+0x20>
 8003c78:	425a      	negs	r2, r3
 8003c7a:	50e2      	str	r2, [r4, r3]
 8003c7c:	e7d0      	b.n	8003c20 <_malloc_r+0x20>
 8003c7e:	428c      	cmp	r4, r1
 8003c80:	684b      	ldr	r3, [r1, #4]
 8003c82:	bf16      	itet	ne
 8003c84:	6063      	strne	r3, [r4, #4]
 8003c86:	6013      	streq	r3, [r2, #0]
 8003c88:	460c      	movne	r4, r1
 8003c8a:	e7eb      	b.n	8003c64 <_malloc_r+0x64>
 8003c8c:	460c      	mov	r4, r1
 8003c8e:	6849      	ldr	r1, [r1, #4]
 8003c90:	e7cc      	b.n	8003c2c <_malloc_r+0x2c>
 8003c92:	1cc4      	adds	r4, r0, #3
 8003c94:	f024 0403 	bic.w	r4, r4, #3
 8003c98:	42a0      	cmp	r0, r4
 8003c9a:	d005      	beq.n	8003ca8 <_malloc_r+0xa8>
 8003c9c:	1a21      	subs	r1, r4, r0
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	f000 f8a0 	bl	8003de4 <_sbrk_r>
 8003ca4:	3001      	adds	r0, #1
 8003ca6:	d0cf      	beq.n	8003c48 <_malloc_r+0x48>
 8003ca8:	6025      	str	r5, [r4, #0]
 8003caa:	e7db      	b.n	8003c64 <_malloc_r+0x64>
 8003cac:	20000098 	.word	0x20000098
 8003cb0:	2000009c 	.word	0x2000009c

08003cb4 <_puts_r>:
 8003cb4:	b570      	push	{r4, r5, r6, lr}
 8003cb6:	460e      	mov	r6, r1
 8003cb8:	4605      	mov	r5, r0
 8003cba:	b118      	cbz	r0, 8003cc4 <_puts_r+0x10>
 8003cbc:	6983      	ldr	r3, [r0, #24]
 8003cbe:	b90b      	cbnz	r3, 8003cc4 <_puts_r+0x10>
 8003cc0:	f000 fa50 	bl	8004164 <__sinit>
 8003cc4:	69ab      	ldr	r3, [r5, #24]
 8003cc6:	68ac      	ldr	r4, [r5, #8]
 8003cc8:	b913      	cbnz	r3, 8003cd0 <_puts_r+0x1c>
 8003cca:	4628      	mov	r0, r5
 8003ccc:	f000 fa4a 	bl	8004164 <__sinit>
 8003cd0:	4b23      	ldr	r3, [pc, #140]	; (8003d60 <_puts_r+0xac>)
 8003cd2:	429c      	cmp	r4, r3
 8003cd4:	d117      	bne.n	8003d06 <_puts_r+0x52>
 8003cd6:	686c      	ldr	r4, [r5, #4]
 8003cd8:	89a3      	ldrh	r3, [r4, #12]
 8003cda:	071b      	lsls	r3, r3, #28
 8003cdc:	d51d      	bpl.n	8003d1a <_puts_r+0x66>
 8003cde:	6923      	ldr	r3, [r4, #16]
 8003ce0:	b1db      	cbz	r3, 8003d1a <_puts_r+0x66>
 8003ce2:	3e01      	subs	r6, #1
 8003ce4:	68a3      	ldr	r3, [r4, #8]
 8003ce6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003cea:	3b01      	subs	r3, #1
 8003cec:	60a3      	str	r3, [r4, #8]
 8003cee:	b9e9      	cbnz	r1, 8003d2c <_puts_r+0x78>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	da2e      	bge.n	8003d52 <_puts_r+0x9e>
 8003cf4:	4622      	mov	r2, r4
 8003cf6:	210a      	movs	r1, #10
 8003cf8:	4628      	mov	r0, r5
 8003cfa:	f000 f883 	bl	8003e04 <__swbuf_r>
 8003cfe:	3001      	adds	r0, #1
 8003d00:	d011      	beq.n	8003d26 <_puts_r+0x72>
 8003d02:	200a      	movs	r0, #10
 8003d04:	e011      	b.n	8003d2a <_puts_r+0x76>
 8003d06:	4b17      	ldr	r3, [pc, #92]	; (8003d64 <_puts_r+0xb0>)
 8003d08:	429c      	cmp	r4, r3
 8003d0a:	d101      	bne.n	8003d10 <_puts_r+0x5c>
 8003d0c:	68ac      	ldr	r4, [r5, #8]
 8003d0e:	e7e3      	b.n	8003cd8 <_puts_r+0x24>
 8003d10:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <_puts_r+0xb4>)
 8003d12:	429c      	cmp	r4, r3
 8003d14:	bf08      	it	eq
 8003d16:	68ec      	ldreq	r4, [r5, #12]
 8003d18:	e7de      	b.n	8003cd8 <_puts_r+0x24>
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	f000 f8c3 	bl	8003ea8 <__swsetup_r>
 8003d22:	2800      	cmp	r0, #0
 8003d24:	d0dd      	beq.n	8003ce2 <_puts_r+0x2e>
 8003d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d2a:	bd70      	pop	{r4, r5, r6, pc}
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	da04      	bge.n	8003d3a <_puts_r+0x86>
 8003d30:	69a2      	ldr	r2, [r4, #24]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	dc06      	bgt.n	8003d44 <_puts_r+0x90>
 8003d36:	290a      	cmp	r1, #10
 8003d38:	d004      	beq.n	8003d44 <_puts_r+0x90>
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	6022      	str	r2, [r4, #0]
 8003d40:	7019      	strb	r1, [r3, #0]
 8003d42:	e7cf      	b.n	8003ce4 <_puts_r+0x30>
 8003d44:	4622      	mov	r2, r4
 8003d46:	4628      	mov	r0, r5
 8003d48:	f000 f85c 	bl	8003e04 <__swbuf_r>
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d1c9      	bne.n	8003ce4 <_puts_r+0x30>
 8003d50:	e7e9      	b.n	8003d26 <_puts_r+0x72>
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	200a      	movs	r0, #10
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	6022      	str	r2, [r4, #0]
 8003d5a:	7018      	strb	r0, [r3, #0]
 8003d5c:	e7e5      	b.n	8003d2a <_puts_r+0x76>
 8003d5e:	bf00      	nop
 8003d60:	080045b8 	.word	0x080045b8
 8003d64:	080045d8 	.word	0x080045d8
 8003d68:	08004598 	.word	0x08004598

08003d6c <puts>:
 8003d6c:	4b02      	ldr	r3, [pc, #8]	; (8003d78 <puts+0xc>)
 8003d6e:	4601      	mov	r1, r0
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	f7ff bf9f 	b.w	8003cb4 <_puts_r>
 8003d76:	bf00      	nop
 8003d78:	2000000c 	.word	0x2000000c

08003d7c <rand>:
 8003d7c:	b538      	push	{r3, r4, r5, lr}
 8003d7e:	4b13      	ldr	r3, [pc, #76]	; (8003dcc <rand+0x50>)
 8003d80:	681c      	ldr	r4, [r3, #0]
 8003d82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d84:	b97b      	cbnz	r3, 8003da6 <rand+0x2a>
 8003d86:	2018      	movs	r0, #24
 8003d88:	f7ff fedc 	bl	8003b44 <malloc>
 8003d8c:	4a10      	ldr	r2, [pc, #64]	; (8003dd0 <rand+0x54>)
 8003d8e:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <rand+0x58>)
 8003d90:	63a0      	str	r0, [r4, #56]	; 0x38
 8003d92:	e9c0 2300 	strd	r2, r3, [r0]
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <rand+0x5c>)
 8003d98:	6083      	str	r3, [r0, #8]
 8003d9a:	230b      	movs	r3, #11
 8003d9c:	8183      	strh	r3, [r0, #12]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	2300      	movs	r3, #0
 8003da2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003da6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003da8:	480c      	ldr	r0, [pc, #48]	; (8003ddc <rand+0x60>)
 8003daa:	690a      	ldr	r2, [r1, #16]
 8003dac:	694b      	ldr	r3, [r1, #20]
 8003dae:	4c0c      	ldr	r4, [pc, #48]	; (8003de0 <rand+0x64>)
 8003db0:	4350      	muls	r0, r2
 8003db2:	fb04 0003 	mla	r0, r4, r3, r0
 8003db6:	fba2 2304 	umull	r2, r3, r2, r4
 8003dba:	4403      	add	r3, r0
 8003dbc:	1c54      	adds	r4, r2, #1
 8003dbe:	f143 0500 	adc.w	r5, r3, #0
 8003dc2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8003dc6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8003dca:	bd38      	pop	{r3, r4, r5, pc}
 8003dcc:	2000000c 	.word	0x2000000c
 8003dd0:	abcd330e 	.word	0xabcd330e
 8003dd4:	e66d1234 	.word	0xe66d1234
 8003dd8:	0005deec 	.word	0x0005deec
 8003ddc:	5851f42d 	.word	0x5851f42d
 8003de0:	4c957f2d 	.word	0x4c957f2d

08003de4 <_sbrk_r>:
 8003de4:	b538      	push	{r3, r4, r5, lr}
 8003de6:	4c06      	ldr	r4, [pc, #24]	; (8003e00 <_sbrk_r+0x1c>)
 8003de8:	2300      	movs	r3, #0
 8003dea:	4605      	mov	r5, r0
 8003dec:	4608      	mov	r0, r1
 8003dee:	6023      	str	r3, [r4, #0]
 8003df0:	f7ff fdf2 	bl	80039d8 <_sbrk>
 8003df4:	1c43      	adds	r3, r0, #1
 8003df6:	d102      	bne.n	8003dfe <_sbrk_r+0x1a>
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	b103      	cbz	r3, 8003dfe <_sbrk_r+0x1a>
 8003dfc:	602b      	str	r3, [r5, #0]
 8003dfe:	bd38      	pop	{r3, r4, r5, pc}
 8003e00:	20000164 	.word	0x20000164

08003e04 <__swbuf_r>:
 8003e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e06:	460e      	mov	r6, r1
 8003e08:	4614      	mov	r4, r2
 8003e0a:	4605      	mov	r5, r0
 8003e0c:	b118      	cbz	r0, 8003e16 <__swbuf_r+0x12>
 8003e0e:	6983      	ldr	r3, [r0, #24]
 8003e10:	b90b      	cbnz	r3, 8003e16 <__swbuf_r+0x12>
 8003e12:	f000 f9a7 	bl	8004164 <__sinit>
 8003e16:	4b21      	ldr	r3, [pc, #132]	; (8003e9c <__swbuf_r+0x98>)
 8003e18:	429c      	cmp	r4, r3
 8003e1a:	d12a      	bne.n	8003e72 <__swbuf_r+0x6e>
 8003e1c:	686c      	ldr	r4, [r5, #4]
 8003e1e:	69a3      	ldr	r3, [r4, #24]
 8003e20:	60a3      	str	r3, [r4, #8]
 8003e22:	89a3      	ldrh	r3, [r4, #12]
 8003e24:	071a      	lsls	r2, r3, #28
 8003e26:	d52e      	bpl.n	8003e86 <__swbuf_r+0x82>
 8003e28:	6923      	ldr	r3, [r4, #16]
 8003e2a:	b363      	cbz	r3, 8003e86 <__swbuf_r+0x82>
 8003e2c:	6923      	ldr	r3, [r4, #16]
 8003e2e:	6820      	ldr	r0, [r4, #0]
 8003e30:	1ac0      	subs	r0, r0, r3
 8003e32:	6963      	ldr	r3, [r4, #20]
 8003e34:	b2f6      	uxtb	r6, r6
 8003e36:	4283      	cmp	r3, r0
 8003e38:	4637      	mov	r7, r6
 8003e3a:	dc04      	bgt.n	8003e46 <__swbuf_r+0x42>
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	4628      	mov	r0, r5
 8003e40:	f000 f926 	bl	8004090 <_fflush_r>
 8003e44:	bb28      	cbnz	r0, 8003e92 <__swbuf_r+0x8e>
 8003e46:	68a3      	ldr	r3, [r4, #8]
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	60a3      	str	r3, [r4, #8]
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	6022      	str	r2, [r4, #0]
 8003e52:	701e      	strb	r6, [r3, #0]
 8003e54:	6963      	ldr	r3, [r4, #20]
 8003e56:	3001      	adds	r0, #1
 8003e58:	4283      	cmp	r3, r0
 8003e5a:	d004      	beq.n	8003e66 <__swbuf_r+0x62>
 8003e5c:	89a3      	ldrh	r3, [r4, #12]
 8003e5e:	07db      	lsls	r3, r3, #31
 8003e60:	d519      	bpl.n	8003e96 <__swbuf_r+0x92>
 8003e62:	2e0a      	cmp	r6, #10
 8003e64:	d117      	bne.n	8003e96 <__swbuf_r+0x92>
 8003e66:	4621      	mov	r1, r4
 8003e68:	4628      	mov	r0, r5
 8003e6a:	f000 f911 	bl	8004090 <_fflush_r>
 8003e6e:	b190      	cbz	r0, 8003e96 <__swbuf_r+0x92>
 8003e70:	e00f      	b.n	8003e92 <__swbuf_r+0x8e>
 8003e72:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <__swbuf_r+0x9c>)
 8003e74:	429c      	cmp	r4, r3
 8003e76:	d101      	bne.n	8003e7c <__swbuf_r+0x78>
 8003e78:	68ac      	ldr	r4, [r5, #8]
 8003e7a:	e7d0      	b.n	8003e1e <__swbuf_r+0x1a>
 8003e7c:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <__swbuf_r+0xa0>)
 8003e7e:	429c      	cmp	r4, r3
 8003e80:	bf08      	it	eq
 8003e82:	68ec      	ldreq	r4, [r5, #12]
 8003e84:	e7cb      	b.n	8003e1e <__swbuf_r+0x1a>
 8003e86:	4621      	mov	r1, r4
 8003e88:	4628      	mov	r0, r5
 8003e8a:	f000 f80d 	bl	8003ea8 <__swsetup_r>
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	d0cc      	beq.n	8003e2c <__swbuf_r+0x28>
 8003e92:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003e96:	4638      	mov	r0, r7
 8003e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	080045b8 	.word	0x080045b8
 8003ea0:	080045d8 	.word	0x080045d8
 8003ea4:	08004598 	.word	0x08004598

08003ea8 <__swsetup_r>:
 8003ea8:	4b32      	ldr	r3, [pc, #200]	; (8003f74 <__swsetup_r+0xcc>)
 8003eaa:	b570      	push	{r4, r5, r6, lr}
 8003eac:	681d      	ldr	r5, [r3, #0]
 8003eae:	4606      	mov	r6, r0
 8003eb0:	460c      	mov	r4, r1
 8003eb2:	b125      	cbz	r5, 8003ebe <__swsetup_r+0x16>
 8003eb4:	69ab      	ldr	r3, [r5, #24]
 8003eb6:	b913      	cbnz	r3, 8003ebe <__swsetup_r+0x16>
 8003eb8:	4628      	mov	r0, r5
 8003eba:	f000 f953 	bl	8004164 <__sinit>
 8003ebe:	4b2e      	ldr	r3, [pc, #184]	; (8003f78 <__swsetup_r+0xd0>)
 8003ec0:	429c      	cmp	r4, r3
 8003ec2:	d10f      	bne.n	8003ee4 <__swsetup_r+0x3c>
 8003ec4:	686c      	ldr	r4, [r5, #4]
 8003ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	0715      	lsls	r5, r2, #28
 8003ece:	d42c      	bmi.n	8003f2a <__swsetup_r+0x82>
 8003ed0:	06d0      	lsls	r0, r2, #27
 8003ed2:	d411      	bmi.n	8003ef8 <__swsetup_r+0x50>
 8003ed4:	2209      	movs	r2, #9
 8003ed6:	6032      	str	r2, [r6, #0]
 8003ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003edc:	81a3      	strh	r3, [r4, #12]
 8003ede:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ee2:	e03e      	b.n	8003f62 <__swsetup_r+0xba>
 8003ee4:	4b25      	ldr	r3, [pc, #148]	; (8003f7c <__swsetup_r+0xd4>)
 8003ee6:	429c      	cmp	r4, r3
 8003ee8:	d101      	bne.n	8003eee <__swsetup_r+0x46>
 8003eea:	68ac      	ldr	r4, [r5, #8]
 8003eec:	e7eb      	b.n	8003ec6 <__swsetup_r+0x1e>
 8003eee:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <__swsetup_r+0xd8>)
 8003ef0:	429c      	cmp	r4, r3
 8003ef2:	bf08      	it	eq
 8003ef4:	68ec      	ldreq	r4, [r5, #12]
 8003ef6:	e7e6      	b.n	8003ec6 <__swsetup_r+0x1e>
 8003ef8:	0751      	lsls	r1, r2, #29
 8003efa:	d512      	bpl.n	8003f22 <__swsetup_r+0x7a>
 8003efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003efe:	b141      	cbz	r1, 8003f12 <__swsetup_r+0x6a>
 8003f00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f04:	4299      	cmp	r1, r3
 8003f06:	d002      	beq.n	8003f0e <__swsetup_r+0x66>
 8003f08:	4630      	mov	r0, r6
 8003f0a:	f7ff fe2b 	bl	8003b64 <_free_r>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	6363      	str	r3, [r4, #52]	; 0x34
 8003f12:	89a3      	ldrh	r3, [r4, #12]
 8003f14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f18:	81a3      	strh	r3, [r4, #12]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	6063      	str	r3, [r4, #4]
 8003f1e:	6923      	ldr	r3, [r4, #16]
 8003f20:	6023      	str	r3, [r4, #0]
 8003f22:	89a3      	ldrh	r3, [r4, #12]
 8003f24:	f043 0308 	orr.w	r3, r3, #8
 8003f28:	81a3      	strh	r3, [r4, #12]
 8003f2a:	6923      	ldr	r3, [r4, #16]
 8003f2c:	b94b      	cbnz	r3, 8003f42 <__swsetup_r+0x9a>
 8003f2e:	89a3      	ldrh	r3, [r4, #12]
 8003f30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f38:	d003      	beq.n	8003f42 <__swsetup_r+0x9a>
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	f000 f9bf 	bl	80042c0 <__smakebuf_r>
 8003f42:	89a2      	ldrh	r2, [r4, #12]
 8003f44:	f012 0301 	ands.w	r3, r2, #1
 8003f48:	d00c      	beq.n	8003f64 <__swsetup_r+0xbc>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60a3      	str	r3, [r4, #8]
 8003f4e:	6963      	ldr	r3, [r4, #20]
 8003f50:	425b      	negs	r3, r3
 8003f52:	61a3      	str	r3, [r4, #24]
 8003f54:	6923      	ldr	r3, [r4, #16]
 8003f56:	b953      	cbnz	r3, 8003f6e <__swsetup_r+0xc6>
 8003f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f5c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003f60:	d1ba      	bne.n	8003ed8 <__swsetup_r+0x30>
 8003f62:	bd70      	pop	{r4, r5, r6, pc}
 8003f64:	0792      	lsls	r2, r2, #30
 8003f66:	bf58      	it	pl
 8003f68:	6963      	ldrpl	r3, [r4, #20]
 8003f6a:	60a3      	str	r3, [r4, #8]
 8003f6c:	e7f2      	b.n	8003f54 <__swsetup_r+0xac>
 8003f6e:	2000      	movs	r0, #0
 8003f70:	e7f7      	b.n	8003f62 <__swsetup_r+0xba>
 8003f72:	bf00      	nop
 8003f74:	2000000c 	.word	0x2000000c
 8003f78:	080045b8 	.word	0x080045b8
 8003f7c:	080045d8 	.word	0x080045d8
 8003f80:	08004598 	.word	0x08004598

08003f84 <__sflush_r>:
 8003f84:	898a      	ldrh	r2, [r1, #12]
 8003f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8a:	4605      	mov	r5, r0
 8003f8c:	0710      	lsls	r0, r2, #28
 8003f8e:	460c      	mov	r4, r1
 8003f90:	d458      	bmi.n	8004044 <__sflush_r+0xc0>
 8003f92:	684b      	ldr	r3, [r1, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	dc05      	bgt.n	8003fa4 <__sflush_r+0x20>
 8003f98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	dc02      	bgt.n	8003fa4 <__sflush_r+0x20>
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fa6:	2e00      	cmp	r6, #0
 8003fa8:	d0f9      	beq.n	8003f9e <__sflush_r+0x1a>
 8003faa:	2300      	movs	r3, #0
 8003fac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003fb0:	682f      	ldr	r7, [r5, #0]
 8003fb2:	6a21      	ldr	r1, [r4, #32]
 8003fb4:	602b      	str	r3, [r5, #0]
 8003fb6:	d032      	beq.n	800401e <__sflush_r+0x9a>
 8003fb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003fba:	89a3      	ldrh	r3, [r4, #12]
 8003fbc:	075a      	lsls	r2, r3, #29
 8003fbe:	d505      	bpl.n	8003fcc <__sflush_r+0x48>
 8003fc0:	6863      	ldr	r3, [r4, #4]
 8003fc2:	1ac0      	subs	r0, r0, r3
 8003fc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fc6:	b10b      	cbz	r3, 8003fcc <__sflush_r+0x48>
 8003fc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fca:	1ac0      	subs	r0, r0, r3
 8003fcc:	2300      	movs	r3, #0
 8003fce:	4602      	mov	r2, r0
 8003fd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fd2:	6a21      	ldr	r1, [r4, #32]
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	47b0      	blx	r6
 8003fd8:	1c43      	adds	r3, r0, #1
 8003fda:	89a3      	ldrh	r3, [r4, #12]
 8003fdc:	d106      	bne.n	8003fec <__sflush_r+0x68>
 8003fde:	6829      	ldr	r1, [r5, #0]
 8003fe0:	291d      	cmp	r1, #29
 8003fe2:	d848      	bhi.n	8004076 <__sflush_r+0xf2>
 8003fe4:	4a29      	ldr	r2, [pc, #164]	; (800408c <__sflush_r+0x108>)
 8003fe6:	40ca      	lsrs	r2, r1
 8003fe8:	07d6      	lsls	r6, r2, #31
 8003fea:	d544      	bpl.n	8004076 <__sflush_r+0xf2>
 8003fec:	2200      	movs	r2, #0
 8003fee:	6062      	str	r2, [r4, #4]
 8003ff0:	04d9      	lsls	r1, r3, #19
 8003ff2:	6922      	ldr	r2, [r4, #16]
 8003ff4:	6022      	str	r2, [r4, #0]
 8003ff6:	d504      	bpl.n	8004002 <__sflush_r+0x7e>
 8003ff8:	1c42      	adds	r2, r0, #1
 8003ffa:	d101      	bne.n	8004000 <__sflush_r+0x7c>
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	b903      	cbnz	r3, 8004002 <__sflush_r+0x7e>
 8004000:	6560      	str	r0, [r4, #84]	; 0x54
 8004002:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004004:	602f      	str	r7, [r5, #0]
 8004006:	2900      	cmp	r1, #0
 8004008:	d0c9      	beq.n	8003f9e <__sflush_r+0x1a>
 800400a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800400e:	4299      	cmp	r1, r3
 8004010:	d002      	beq.n	8004018 <__sflush_r+0x94>
 8004012:	4628      	mov	r0, r5
 8004014:	f7ff fda6 	bl	8003b64 <_free_r>
 8004018:	2000      	movs	r0, #0
 800401a:	6360      	str	r0, [r4, #52]	; 0x34
 800401c:	e7c0      	b.n	8003fa0 <__sflush_r+0x1c>
 800401e:	2301      	movs	r3, #1
 8004020:	4628      	mov	r0, r5
 8004022:	47b0      	blx	r6
 8004024:	1c41      	adds	r1, r0, #1
 8004026:	d1c8      	bne.n	8003fba <__sflush_r+0x36>
 8004028:	682b      	ldr	r3, [r5, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0c5      	beq.n	8003fba <__sflush_r+0x36>
 800402e:	2b1d      	cmp	r3, #29
 8004030:	d001      	beq.n	8004036 <__sflush_r+0xb2>
 8004032:	2b16      	cmp	r3, #22
 8004034:	d101      	bne.n	800403a <__sflush_r+0xb6>
 8004036:	602f      	str	r7, [r5, #0]
 8004038:	e7b1      	b.n	8003f9e <__sflush_r+0x1a>
 800403a:	89a3      	ldrh	r3, [r4, #12]
 800403c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004040:	81a3      	strh	r3, [r4, #12]
 8004042:	e7ad      	b.n	8003fa0 <__sflush_r+0x1c>
 8004044:	690f      	ldr	r7, [r1, #16]
 8004046:	2f00      	cmp	r7, #0
 8004048:	d0a9      	beq.n	8003f9e <__sflush_r+0x1a>
 800404a:	0793      	lsls	r3, r2, #30
 800404c:	680e      	ldr	r6, [r1, #0]
 800404e:	bf08      	it	eq
 8004050:	694b      	ldreq	r3, [r1, #20]
 8004052:	600f      	str	r7, [r1, #0]
 8004054:	bf18      	it	ne
 8004056:	2300      	movne	r3, #0
 8004058:	eba6 0807 	sub.w	r8, r6, r7
 800405c:	608b      	str	r3, [r1, #8]
 800405e:	f1b8 0f00 	cmp.w	r8, #0
 8004062:	dd9c      	ble.n	8003f9e <__sflush_r+0x1a>
 8004064:	4643      	mov	r3, r8
 8004066:	463a      	mov	r2, r7
 8004068:	6a21      	ldr	r1, [r4, #32]
 800406a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800406c:	4628      	mov	r0, r5
 800406e:	47b0      	blx	r6
 8004070:	2800      	cmp	r0, #0
 8004072:	dc06      	bgt.n	8004082 <__sflush_r+0xfe>
 8004074:	89a3      	ldrh	r3, [r4, #12]
 8004076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800407a:	81a3      	strh	r3, [r4, #12]
 800407c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004080:	e78e      	b.n	8003fa0 <__sflush_r+0x1c>
 8004082:	4407      	add	r7, r0
 8004084:	eba8 0800 	sub.w	r8, r8, r0
 8004088:	e7e9      	b.n	800405e <__sflush_r+0xda>
 800408a:	bf00      	nop
 800408c:	20400001 	.word	0x20400001

08004090 <_fflush_r>:
 8004090:	b538      	push	{r3, r4, r5, lr}
 8004092:	690b      	ldr	r3, [r1, #16]
 8004094:	4605      	mov	r5, r0
 8004096:	460c      	mov	r4, r1
 8004098:	b1db      	cbz	r3, 80040d2 <_fflush_r+0x42>
 800409a:	b118      	cbz	r0, 80040a4 <_fflush_r+0x14>
 800409c:	6983      	ldr	r3, [r0, #24]
 800409e:	b90b      	cbnz	r3, 80040a4 <_fflush_r+0x14>
 80040a0:	f000 f860 	bl	8004164 <__sinit>
 80040a4:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <_fflush_r+0x48>)
 80040a6:	429c      	cmp	r4, r3
 80040a8:	d109      	bne.n	80040be <_fflush_r+0x2e>
 80040aa:	686c      	ldr	r4, [r5, #4]
 80040ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040b0:	b17b      	cbz	r3, 80040d2 <_fflush_r+0x42>
 80040b2:	4621      	mov	r1, r4
 80040b4:	4628      	mov	r0, r5
 80040b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040ba:	f7ff bf63 	b.w	8003f84 <__sflush_r>
 80040be:	4b07      	ldr	r3, [pc, #28]	; (80040dc <_fflush_r+0x4c>)
 80040c0:	429c      	cmp	r4, r3
 80040c2:	d101      	bne.n	80040c8 <_fflush_r+0x38>
 80040c4:	68ac      	ldr	r4, [r5, #8]
 80040c6:	e7f1      	b.n	80040ac <_fflush_r+0x1c>
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <_fflush_r+0x50>)
 80040ca:	429c      	cmp	r4, r3
 80040cc:	bf08      	it	eq
 80040ce:	68ec      	ldreq	r4, [r5, #12]
 80040d0:	e7ec      	b.n	80040ac <_fflush_r+0x1c>
 80040d2:	2000      	movs	r0, #0
 80040d4:	bd38      	pop	{r3, r4, r5, pc}
 80040d6:	bf00      	nop
 80040d8:	080045b8 	.word	0x080045b8
 80040dc:	080045d8 	.word	0x080045d8
 80040e0:	08004598 	.word	0x08004598

080040e4 <std>:
 80040e4:	2300      	movs	r3, #0
 80040e6:	b510      	push	{r4, lr}
 80040e8:	4604      	mov	r4, r0
 80040ea:	e9c0 3300 	strd	r3, r3, [r0]
 80040ee:	6083      	str	r3, [r0, #8]
 80040f0:	8181      	strh	r1, [r0, #12]
 80040f2:	6643      	str	r3, [r0, #100]	; 0x64
 80040f4:	81c2      	strh	r2, [r0, #14]
 80040f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040fa:	6183      	str	r3, [r0, #24]
 80040fc:	4619      	mov	r1, r3
 80040fe:	2208      	movs	r2, #8
 8004100:	305c      	adds	r0, #92	; 0x5c
 8004102:	f7ff fd27 	bl	8003b54 <memset>
 8004106:	4b05      	ldr	r3, [pc, #20]	; (800411c <std+0x38>)
 8004108:	6263      	str	r3, [r4, #36]	; 0x24
 800410a:	4b05      	ldr	r3, [pc, #20]	; (8004120 <std+0x3c>)
 800410c:	62a3      	str	r3, [r4, #40]	; 0x28
 800410e:	4b05      	ldr	r3, [pc, #20]	; (8004124 <std+0x40>)
 8004110:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004112:	4b05      	ldr	r3, [pc, #20]	; (8004128 <std+0x44>)
 8004114:	6224      	str	r4, [r4, #32]
 8004116:	6323      	str	r3, [r4, #48]	; 0x30
 8004118:	bd10      	pop	{r4, pc}
 800411a:	bf00      	nop
 800411c:	08004345 	.word	0x08004345
 8004120:	08004367 	.word	0x08004367
 8004124:	0800439f 	.word	0x0800439f
 8004128:	080043c3 	.word	0x080043c3

0800412c <_cleanup_r>:
 800412c:	4901      	ldr	r1, [pc, #4]	; (8004134 <_cleanup_r+0x8>)
 800412e:	f000 b885 	b.w	800423c <_fwalk_reent>
 8004132:	bf00      	nop
 8004134:	08004091 	.word	0x08004091

08004138 <__sfmoreglue>:
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	1e4a      	subs	r2, r1, #1
 800413c:	2568      	movs	r5, #104	; 0x68
 800413e:	4355      	muls	r5, r2
 8004140:	460e      	mov	r6, r1
 8004142:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004146:	f7ff fd5b 	bl	8003c00 <_malloc_r>
 800414a:	4604      	mov	r4, r0
 800414c:	b140      	cbz	r0, 8004160 <__sfmoreglue+0x28>
 800414e:	2100      	movs	r1, #0
 8004150:	e9c0 1600 	strd	r1, r6, [r0]
 8004154:	300c      	adds	r0, #12
 8004156:	60a0      	str	r0, [r4, #8]
 8004158:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800415c:	f7ff fcfa 	bl	8003b54 <memset>
 8004160:	4620      	mov	r0, r4
 8004162:	bd70      	pop	{r4, r5, r6, pc}

08004164 <__sinit>:
 8004164:	6983      	ldr	r3, [r0, #24]
 8004166:	b510      	push	{r4, lr}
 8004168:	4604      	mov	r4, r0
 800416a:	bb33      	cbnz	r3, 80041ba <__sinit+0x56>
 800416c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004170:	6503      	str	r3, [r0, #80]	; 0x50
 8004172:	4b12      	ldr	r3, [pc, #72]	; (80041bc <__sinit+0x58>)
 8004174:	4a12      	ldr	r2, [pc, #72]	; (80041c0 <__sinit+0x5c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6282      	str	r2, [r0, #40]	; 0x28
 800417a:	4298      	cmp	r0, r3
 800417c:	bf04      	itt	eq
 800417e:	2301      	moveq	r3, #1
 8004180:	6183      	streq	r3, [r0, #24]
 8004182:	f000 f81f 	bl	80041c4 <__sfp>
 8004186:	6060      	str	r0, [r4, #4]
 8004188:	4620      	mov	r0, r4
 800418a:	f000 f81b 	bl	80041c4 <__sfp>
 800418e:	60a0      	str	r0, [r4, #8]
 8004190:	4620      	mov	r0, r4
 8004192:	f000 f817 	bl	80041c4 <__sfp>
 8004196:	2200      	movs	r2, #0
 8004198:	60e0      	str	r0, [r4, #12]
 800419a:	2104      	movs	r1, #4
 800419c:	6860      	ldr	r0, [r4, #4]
 800419e:	f7ff ffa1 	bl	80040e4 <std>
 80041a2:	2201      	movs	r2, #1
 80041a4:	2109      	movs	r1, #9
 80041a6:	68a0      	ldr	r0, [r4, #8]
 80041a8:	f7ff ff9c 	bl	80040e4 <std>
 80041ac:	2202      	movs	r2, #2
 80041ae:	2112      	movs	r1, #18
 80041b0:	68e0      	ldr	r0, [r4, #12]
 80041b2:	f7ff ff97 	bl	80040e4 <std>
 80041b6:	2301      	movs	r3, #1
 80041b8:	61a3      	str	r3, [r4, #24]
 80041ba:	bd10      	pop	{r4, pc}
 80041bc:	08004594 	.word	0x08004594
 80041c0:	0800412d 	.word	0x0800412d

080041c4 <__sfp>:
 80041c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c6:	4b1b      	ldr	r3, [pc, #108]	; (8004234 <__sfp+0x70>)
 80041c8:	681e      	ldr	r6, [r3, #0]
 80041ca:	69b3      	ldr	r3, [r6, #24]
 80041cc:	4607      	mov	r7, r0
 80041ce:	b913      	cbnz	r3, 80041d6 <__sfp+0x12>
 80041d0:	4630      	mov	r0, r6
 80041d2:	f7ff ffc7 	bl	8004164 <__sinit>
 80041d6:	3648      	adds	r6, #72	; 0x48
 80041d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80041dc:	3b01      	subs	r3, #1
 80041de:	d503      	bpl.n	80041e8 <__sfp+0x24>
 80041e0:	6833      	ldr	r3, [r6, #0]
 80041e2:	b133      	cbz	r3, 80041f2 <__sfp+0x2e>
 80041e4:	6836      	ldr	r6, [r6, #0]
 80041e6:	e7f7      	b.n	80041d8 <__sfp+0x14>
 80041e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80041ec:	b16d      	cbz	r5, 800420a <__sfp+0x46>
 80041ee:	3468      	adds	r4, #104	; 0x68
 80041f0:	e7f4      	b.n	80041dc <__sfp+0x18>
 80041f2:	2104      	movs	r1, #4
 80041f4:	4638      	mov	r0, r7
 80041f6:	f7ff ff9f 	bl	8004138 <__sfmoreglue>
 80041fa:	6030      	str	r0, [r6, #0]
 80041fc:	2800      	cmp	r0, #0
 80041fe:	d1f1      	bne.n	80041e4 <__sfp+0x20>
 8004200:	230c      	movs	r3, #12
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	4604      	mov	r4, r0
 8004206:	4620      	mov	r0, r4
 8004208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800420a:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <__sfp+0x74>)
 800420c:	6665      	str	r5, [r4, #100]	; 0x64
 800420e:	e9c4 5500 	strd	r5, r5, [r4]
 8004212:	60a5      	str	r5, [r4, #8]
 8004214:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004218:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800421c:	2208      	movs	r2, #8
 800421e:	4629      	mov	r1, r5
 8004220:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004224:	f7ff fc96 	bl	8003b54 <memset>
 8004228:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800422c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004230:	e7e9      	b.n	8004206 <__sfp+0x42>
 8004232:	bf00      	nop
 8004234:	08004594 	.word	0x08004594
 8004238:	ffff0001 	.word	0xffff0001

0800423c <_fwalk_reent>:
 800423c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004240:	4680      	mov	r8, r0
 8004242:	4689      	mov	r9, r1
 8004244:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004248:	2600      	movs	r6, #0
 800424a:	b914      	cbnz	r4, 8004252 <_fwalk_reent+0x16>
 800424c:	4630      	mov	r0, r6
 800424e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004252:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004256:	3f01      	subs	r7, #1
 8004258:	d501      	bpl.n	800425e <_fwalk_reent+0x22>
 800425a:	6824      	ldr	r4, [r4, #0]
 800425c:	e7f5      	b.n	800424a <_fwalk_reent+0xe>
 800425e:	89ab      	ldrh	r3, [r5, #12]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d907      	bls.n	8004274 <_fwalk_reent+0x38>
 8004264:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004268:	3301      	adds	r3, #1
 800426a:	d003      	beq.n	8004274 <_fwalk_reent+0x38>
 800426c:	4629      	mov	r1, r5
 800426e:	4640      	mov	r0, r8
 8004270:	47c8      	blx	r9
 8004272:	4306      	orrs	r6, r0
 8004274:	3568      	adds	r5, #104	; 0x68
 8004276:	e7ee      	b.n	8004256 <_fwalk_reent+0x1a>

08004278 <__swhatbuf_r>:
 8004278:	b570      	push	{r4, r5, r6, lr}
 800427a:	460e      	mov	r6, r1
 800427c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004280:	2900      	cmp	r1, #0
 8004282:	b096      	sub	sp, #88	; 0x58
 8004284:	4614      	mov	r4, r2
 8004286:	461d      	mov	r5, r3
 8004288:	da07      	bge.n	800429a <__swhatbuf_r+0x22>
 800428a:	2300      	movs	r3, #0
 800428c:	602b      	str	r3, [r5, #0]
 800428e:	89b3      	ldrh	r3, [r6, #12]
 8004290:	061a      	lsls	r2, r3, #24
 8004292:	d410      	bmi.n	80042b6 <__swhatbuf_r+0x3e>
 8004294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004298:	e00e      	b.n	80042b8 <__swhatbuf_r+0x40>
 800429a:	466a      	mov	r2, sp
 800429c:	f000 f8b8 	bl	8004410 <_fstat_r>
 80042a0:	2800      	cmp	r0, #0
 80042a2:	dbf2      	blt.n	800428a <__swhatbuf_r+0x12>
 80042a4:	9a01      	ldr	r2, [sp, #4]
 80042a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80042aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80042ae:	425a      	negs	r2, r3
 80042b0:	415a      	adcs	r2, r3
 80042b2:	602a      	str	r2, [r5, #0]
 80042b4:	e7ee      	b.n	8004294 <__swhatbuf_r+0x1c>
 80042b6:	2340      	movs	r3, #64	; 0x40
 80042b8:	2000      	movs	r0, #0
 80042ba:	6023      	str	r3, [r4, #0]
 80042bc:	b016      	add	sp, #88	; 0x58
 80042be:	bd70      	pop	{r4, r5, r6, pc}

080042c0 <__smakebuf_r>:
 80042c0:	898b      	ldrh	r3, [r1, #12]
 80042c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042c4:	079d      	lsls	r5, r3, #30
 80042c6:	4606      	mov	r6, r0
 80042c8:	460c      	mov	r4, r1
 80042ca:	d507      	bpl.n	80042dc <__smakebuf_r+0x1c>
 80042cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042d0:	6023      	str	r3, [r4, #0]
 80042d2:	6123      	str	r3, [r4, #16]
 80042d4:	2301      	movs	r3, #1
 80042d6:	6163      	str	r3, [r4, #20]
 80042d8:	b002      	add	sp, #8
 80042da:	bd70      	pop	{r4, r5, r6, pc}
 80042dc:	ab01      	add	r3, sp, #4
 80042de:	466a      	mov	r2, sp
 80042e0:	f7ff ffca 	bl	8004278 <__swhatbuf_r>
 80042e4:	9900      	ldr	r1, [sp, #0]
 80042e6:	4605      	mov	r5, r0
 80042e8:	4630      	mov	r0, r6
 80042ea:	f7ff fc89 	bl	8003c00 <_malloc_r>
 80042ee:	b948      	cbnz	r0, 8004304 <__smakebuf_r+0x44>
 80042f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042f4:	059a      	lsls	r2, r3, #22
 80042f6:	d4ef      	bmi.n	80042d8 <__smakebuf_r+0x18>
 80042f8:	f023 0303 	bic.w	r3, r3, #3
 80042fc:	f043 0302 	orr.w	r3, r3, #2
 8004300:	81a3      	strh	r3, [r4, #12]
 8004302:	e7e3      	b.n	80042cc <__smakebuf_r+0xc>
 8004304:	4b0d      	ldr	r3, [pc, #52]	; (800433c <__smakebuf_r+0x7c>)
 8004306:	62b3      	str	r3, [r6, #40]	; 0x28
 8004308:	89a3      	ldrh	r3, [r4, #12]
 800430a:	6020      	str	r0, [r4, #0]
 800430c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004310:	81a3      	strh	r3, [r4, #12]
 8004312:	9b00      	ldr	r3, [sp, #0]
 8004314:	6163      	str	r3, [r4, #20]
 8004316:	9b01      	ldr	r3, [sp, #4]
 8004318:	6120      	str	r0, [r4, #16]
 800431a:	b15b      	cbz	r3, 8004334 <__smakebuf_r+0x74>
 800431c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004320:	4630      	mov	r0, r6
 8004322:	f000 f887 	bl	8004434 <_isatty_r>
 8004326:	b128      	cbz	r0, 8004334 <__smakebuf_r+0x74>
 8004328:	89a3      	ldrh	r3, [r4, #12]
 800432a:	f023 0303 	bic.w	r3, r3, #3
 800432e:	f043 0301 	orr.w	r3, r3, #1
 8004332:	81a3      	strh	r3, [r4, #12]
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	431d      	orrs	r5, r3
 8004338:	81a5      	strh	r5, [r4, #12]
 800433a:	e7cd      	b.n	80042d8 <__smakebuf_r+0x18>
 800433c:	0800412d 	.word	0x0800412d

08004340 <__malloc_lock>:
 8004340:	4770      	bx	lr

08004342 <__malloc_unlock>:
 8004342:	4770      	bx	lr

08004344 <__sread>:
 8004344:	b510      	push	{r4, lr}
 8004346:	460c      	mov	r4, r1
 8004348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800434c:	f000 f894 	bl	8004478 <_read_r>
 8004350:	2800      	cmp	r0, #0
 8004352:	bfab      	itete	ge
 8004354:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004356:	89a3      	ldrhlt	r3, [r4, #12]
 8004358:	181b      	addge	r3, r3, r0
 800435a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800435e:	bfac      	ite	ge
 8004360:	6563      	strge	r3, [r4, #84]	; 0x54
 8004362:	81a3      	strhlt	r3, [r4, #12]
 8004364:	bd10      	pop	{r4, pc}

08004366 <__swrite>:
 8004366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800436a:	461f      	mov	r7, r3
 800436c:	898b      	ldrh	r3, [r1, #12]
 800436e:	05db      	lsls	r3, r3, #23
 8004370:	4605      	mov	r5, r0
 8004372:	460c      	mov	r4, r1
 8004374:	4616      	mov	r6, r2
 8004376:	d505      	bpl.n	8004384 <__swrite+0x1e>
 8004378:	2302      	movs	r3, #2
 800437a:	2200      	movs	r2, #0
 800437c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004380:	f000 f868 	bl	8004454 <_lseek_r>
 8004384:	89a3      	ldrh	r3, [r4, #12]
 8004386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800438a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800438e:	81a3      	strh	r3, [r4, #12]
 8004390:	4632      	mov	r2, r6
 8004392:	463b      	mov	r3, r7
 8004394:	4628      	mov	r0, r5
 8004396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800439a:	f000 b817 	b.w	80043cc <_write_r>

0800439e <__sseek>:
 800439e:	b510      	push	{r4, lr}
 80043a0:	460c      	mov	r4, r1
 80043a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043a6:	f000 f855 	bl	8004454 <_lseek_r>
 80043aa:	1c43      	adds	r3, r0, #1
 80043ac:	89a3      	ldrh	r3, [r4, #12]
 80043ae:	bf15      	itete	ne
 80043b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80043b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043ba:	81a3      	strheq	r3, [r4, #12]
 80043bc:	bf18      	it	ne
 80043be:	81a3      	strhne	r3, [r4, #12]
 80043c0:	bd10      	pop	{r4, pc}

080043c2 <__sclose>:
 80043c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043c6:	f000 b813 	b.w	80043f0 <_close_r>
	...

080043cc <_write_r>:
 80043cc:	b538      	push	{r3, r4, r5, lr}
 80043ce:	4c07      	ldr	r4, [pc, #28]	; (80043ec <_write_r+0x20>)
 80043d0:	4605      	mov	r5, r0
 80043d2:	4608      	mov	r0, r1
 80043d4:	4611      	mov	r1, r2
 80043d6:	2200      	movs	r2, #0
 80043d8:	6022      	str	r2, [r4, #0]
 80043da:	461a      	mov	r2, r3
 80043dc:	f7ff f9b6 	bl	800374c <_write>
 80043e0:	1c43      	adds	r3, r0, #1
 80043e2:	d102      	bne.n	80043ea <_write_r+0x1e>
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	b103      	cbz	r3, 80043ea <_write_r+0x1e>
 80043e8:	602b      	str	r3, [r5, #0]
 80043ea:	bd38      	pop	{r3, r4, r5, pc}
 80043ec:	20000164 	.word	0x20000164

080043f0 <_close_r>:
 80043f0:	b538      	push	{r3, r4, r5, lr}
 80043f2:	4c06      	ldr	r4, [pc, #24]	; (800440c <_close_r+0x1c>)
 80043f4:	2300      	movs	r3, #0
 80043f6:	4605      	mov	r5, r0
 80043f8:	4608      	mov	r0, r1
 80043fa:	6023      	str	r3, [r4, #0]
 80043fc:	f7ff fab8 	bl	8003970 <_close>
 8004400:	1c43      	adds	r3, r0, #1
 8004402:	d102      	bne.n	800440a <_close_r+0x1a>
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	b103      	cbz	r3, 800440a <_close_r+0x1a>
 8004408:	602b      	str	r3, [r5, #0]
 800440a:	bd38      	pop	{r3, r4, r5, pc}
 800440c:	20000164 	.word	0x20000164

08004410 <_fstat_r>:
 8004410:	b538      	push	{r3, r4, r5, lr}
 8004412:	4c07      	ldr	r4, [pc, #28]	; (8004430 <_fstat_r+0x20>)
 8004414:	2300      	movs	r3, #0
 8004416:	4605      	mov	r5, r0
 8004418:	4608      	mov	r0, r1
 800441a:	4611      	mov	r1, r2
 800441c:	6023      	str	r3, [r4, #0]
 800441e:	f7ff fab3 	bl	8003988 <_fstat>
 8004422:	1c43      	adds	r3, r0, #1
 8004424:	d102      	bne.n	800442c <_fstat_r+0x1c>
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	b103      	cbz	r3, 800442c <_fstat_r+0x1c>
 800442a:	602b      	str	r3, [r5, #0]
 800442c:	bd38      	pop	{r3, r4, r5, pc}
 800442e:	bf00      	nop
 8004430:	20000164 	.word	0x20000164

08004434 <_isatty_r>:
 8004434:	b538      	push	{r3, r4, r5, lr}
 8004436:	4c06      	ldr	r4, [pc, #24]	; (8004450 <_isatty_r+0x1c>)
 8004438:	2300      	movs	r3, #0
 800443a:	4605      	mov	r5, r0
 800443c:	4608      	mov	r0, r1
 800443e:	6023      	str	r3, [r4, #0]
 8004440:	f7ff fab2 	bl	80039a8 <_isatty>
 8004444:	1c43      	adds	r3, r0, #1
 8004446:	d102      	bne.n	800444e <_isatty_r+0x1a>
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	b103      	cbz	r3, 800444e <_isatty_r+0x1a>
 800444c:	602b      	str	r3, [r5, #0]
 800444e:	bd38      	pop	{r3, r4, r5, pc}
 8004450:	20000164 	.word	0x20000164

08004454 <_lseek_r>:
 8004454:	b538      	push	{r3, r4, r5, lr}
 8004456:	4c07      	ldr	r4, [pc, #28]	; (8004474 <_lseek_r+0x20>)
 8004458:	4605      	mov	r5, r0
 800445a:	4608      	mov	r0, r1
 800445c:	4611      	mov	r1, r2
 800445e:	2200      	movs	r2, #0
 8004460:	6022      	str	r2, [r4, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	f7ff faab 	bl	80039be <_lseek>
 8004468:	1c43      	adds	r3, r0, #1
 800446a:	d102      	bne.n	8004472 <_lseek_r+0x1e>
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	b103      	cbz	r3, 8004472 <_lseek_r+0x1e>
 8004470:	602b      	str	r3, [r5, #0]
 8004472:	bd38      	pop	{r3, r4, r5, pc}
 8004474:	20000164 	.word	0x20000164

08004478 <_read_r>:
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	4c07      	ldr	r4, [pc, #28]	; (8004498 <_read_r+0x20>)
 800447c:	4605      	mov	r5, r0
 800447e:	4608      	mov	r0, r1
 8004480:	4611      	mov	r1, r2
 8004482:	2200      	movs	r2, #0
 8004484:	6022      	str	r2, [r4, #0]
 8004486:	461a      	mov	r2, r3
 8004488:	f7ff f976 	bl	8003778 <_read>
 800448c:	1c43      	adds	r3, r0, #1
 800448e:	d102      	bne.n	8004496 <_read_r+0x1e>
 8004490:	6823      	ldr	r3, [r4, #0]
 8004492:	b103      	cbz	r3, 8004496 <_read_r+0x1e>
 8004494:	602b      	str	r3, [r5, #0]
 8004496:	bd38      	pop	{r3, r4, r5, pc}
 8004498:	20000164 	.word	0x20000164

0800449c <_init>:
 800449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449e:	bf00      	nop
 80044a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a2:	bc08      	pop	{r3}
 80044a4:	469e      	mov	lr, r3
 80044a6:	4770      	bx	lr

080044a8 <_fini>:
 80044a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044aa:	bf00      	nop
 80044ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ae:	bc08      	pop	{r3}
 80044b0:	469e      	mov	lr, r3
 80044b2:	4770      	bx	lr
